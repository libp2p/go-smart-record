package xr

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

func (n Blob_IPLD) Bytes() []byte {
	return n.x
}
func (_Blob_IPLD__Prototype) FromBytes(v []byte) (Blob_IPLD, error) {
	n := _Blob_IPLD{v}
	return &n, nil
}
type _Blob_IPLD__Maybe struct {
	m schema.Maybe
	v Blob_IPLD
}
type MaybeBlob_IPLD = *_Blob_IPLD__Maybe

func (m MaybeBlob_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBlob_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBlob_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBlob_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeBlob_IPLD) Must() Blob_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Blob_IPLD)(&_Blob_IPLD{})
var _ schema.TypedNode = (Blob_IPLD)(&_Blob_IPLD{})
func (Blob_IPLD) Kind() ipld.Kind {
	return ipld.Kind_Bytes
}
func (Blob_IPLD) LookupByString(string) (ipld.Node, error) {
	return mixins.Bytes{"xr.Blob_IPLD"}.LookupByString("")
}
func (Blob_IPLD) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Bytes{"xr.Blob_IPLD"}.LookupByNode(nil)
}
func (Blob_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Bytes{"xr.Blob_IPLD"}.LookupByIndex(0)
}
func (Blob_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Bytes{"xr.Blob_IPLD"}.LookupBySegment(seg)
}
func (Blob_IPLD) MapIterator() ipld.MapIterator {
	return nil
}
func (Blob_IPLD) ListIterator() ipld.ListIterator {
	return nil
}
func (Blob_IPLD) Length() int64 {
	return -1
}
func (Blob_IPLD) IsAbsent() bool {
	return false
}
func (Blob_IPLD) IsNull() bool {
	return false
}
func (Blob_IPLD) AsBool() (bool, error) {
	return mixins.Bytes{"xr.Blob_IPLD"}.AsBool()
}
func (Blob_IPLD) AsInt() (int64, error) {
	return mixins.Bytes{"xr.Blob_IPLD"}.AsInt()
}
func (Blob_IPLD) AsFloat() (float64, error) {
	return mixins.Bytes{"xr.Blob_IPLD"}.AsFloat()
}
func (Blob_IPLD) AsString() (string, error) {
	return mixins.Bytes{"xr.Blob_IPLD"}.AsString()
}
func (n Blob_IPLD) AsBytes() ([]byte, error) {
	return n.x, nil
}
func (Blob_IPLD) AsLink() (ipld.Link, error) {
	return mixins.Bytes{"xr.Blob_IPLD"}.AsLink()
}
func (Blob_IPLD) Prototype() ipld.NodePrototype {
	return _Blob_IPLD__Prototype{}
}
type _Blob_IPLD__Prototype struct{}

func (_Blob_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Blob_IPLD__Builder
	nb.Reset()
	return &nb
}
type _Blob_IPLD__Builder struct {
	_Blob_IPLD__Assembler
}
func (nb *_Blob_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Blob_IPLD__Builder) Reset() {
	var w _Blob_IPLD
	var m schema.Maybe
	*nb = _Blob_IPLD__Builder{_Blob_IPLD__Assembler{w: &w, m: &m}}
}
type _Blob_IPLD__Assembler struct {
	w *_Blob_IPLD
	m *schema.Maybe
}

func (na *_Blob_IPLD__Assembler) reset() {}
func (_Blob_IPLD__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.BytesAssembler{"xr.Blob_IPLD"}.BeginMap(0)
}
func (_Blob_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.BytesAssembler{"xr.Blob_IPLD"}.BeginList(0)
}
func (na *_Blob_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BytesAssembler{"xr.Blob_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Blob_IPLD__Assembler) AssignBool(bool) error {
	return mixins.BytesAssembler{"xr.Blob_IPLD"}.AssignBool(false)
}
func (_Blob_IPLD__Assembler) AssignInt(int64) error {
	return mixins.BytesAssembler{"xr.Blob_IPLD"}.AssignInt(0)
}
func (_Blob_IPLD__Assembler) AssignFloat(float64) error {
	return mixins.BytesAssembler{"xr.Blob_IPLD"}.AssignFloat(0)
}
func (_Blob_IPLD__Assembler) AssignString(string) error {
	return mixins.BytesAssembler{"xr.Blob_IPLD"}.AssignString("")
}
func (na *_Blob_IPLD__Assembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Blob_IPLD{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Blob_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.BytesAssembler{"xr.Blob_IPLD"}.AssignLink(nil)
}
func (na *_Blob_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Blob_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBytes(); err != nil {
		return err
	} else {
		return na.AssignBytes(v2)
	}
}
func (_Blob_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _Blob_IPLD__Prototype{}
}
func (Blob_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Blob_IPLD) Representation() ipld.Node {
	return (*_Blob_IPLD__Repr)(n)
}
type _Blob_IPLD__Repr = _Blob_IPLD
var _ ipld.Node = &_Blob_IPLD__Repr{}
type _Blob_IPLD__ReprPrototype = _Blob_IPLD__Prototype
type _Blob_IPLD__ReprAssembler = _Blob_IPLD__Assembler

func (n Bool_IPLD) Bool() bool {
	return n.x
}
func (_Bool_IPLD__Prototype) FromBool(v bool) (Bool_IPLD, error) {
	n := _Bool_IPLD{v}
	return &n, nil
}
type _Bool_IPLD__Maybe struct {
	m schema.Maybe
	v Bool_IPLD
}
type MaybeBool_IPLD = *_Bool_IPLD__Maybe

func (m MaybeBool_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBool_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBool_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBool_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeBool_IPLD) Must() Bool_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Bool_IPLD)(&_Bool_IPLD{})
var _ schema.TypedNode = (Bool_IPLD)(&_Bool_IPLD{})
func (Bool_IPLD) Kind() ipld.Kind {
	return ipld.Kind_Bool
}
func (Bool_IPLD) LookupByString(string) (ipld.Node, error) {
	return mixins.Bool{"xr.Bool_IPLD"}.LookupByString("")
}
func (Bool_IPLD) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Bool{"xr.Bool_IPLD"}.LookupByNode(nil)
}
func (Bool_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Bool{"xr.Bool_IPLD"}.LookupByIndex(0)
}
func (Bool_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Bool{"xr.Bool_IPLD"}.LookupBySegment(seg)
}
func (Bool_IPLD) MapIterator() ipld.MapIterator {
	return nil
}
func (Bool_IPLD) ListIterator() ipld.ListIterator {
	return nil
}
func (Bool_IPLD) Length() int64 {
	return -1
}
func (Bool_IPLD) IsAbsent() bool {
	return false
}
func (Bool_IPLD) IsNull() bool {
	return false
}
func (n Bool_IPLD) AsBool() (bool, error) {
	return n.x, nil
}
func (Bool_IPLD) AsInt() (int64, error) {
	return mixins.Bool{"xr.Bool_IPLD"}.AsInt()
}
func (Bool_IPLD) AsFloat() (float64, error) {
	return mixins.Bool{"xr.Bool_IPLD"}.AsFloat()
}
func (Bool_IPLD) AsString() (string, error) {
	return mixins.Bool{"xr.Bool_IPLD"}.AsString()
}
func (Bool_IPLD) AsBytes() ([]byte, error) {
	return mixins.Bool{"xr.Bool_IPLD"}.AsBytes()
}
func (Bool_IPLD) AsLink() (ipld.Link, error) {
	return mixins.Bool{"xr.Bool_IPLD"}.AsLink()
}
func (Bool_IPLD) Prototype() ipld.NodePrototype {
	return _Bool_IPLD__Prototype{}
}
type _Bool_IPLD__Prototype struct{}

func (_Bool_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Bool_IPLD__Builder
	nb.Reset()
	return &nb
}
type _Bool_IPLD__Builder struct {
	_Bool_IPLD__Assembler
}
func (nb *_Bool_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bool_IPLD__Builder) Reset() {
	var w _Bool_IPLD
	var m schema.Maybe
	*nb = _Bool_IPLD__Builder{_Bool_IPLD__Assembler{w: &w, m: &m}}
}
type _Bool_IPLD__Assembler struct {
	w *_Bool_IPLD
	m *schema.Maybe
}

func (na *_Bool_IPLD__Assembler) reset() {}
func (_Bool_IPLD__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.BoolAssembler{"xr.Bool_IPLD"}.BeginMap(0)
}
func (_Bool_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.BoolAssembler{"xr.Bool_IPLD"}.BeginList(0)
}
func (na *_Bool_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BoolAssembler{"xr.Bool_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (na *_Bool_IPLD__Assembler) AssignBool(v bool) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Bool_IPLD{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bool_IPLD__Assembler) AssignInt(int64) error {
	return mixins.BoolAssembler{"xr.Bool_IPLD"}.AssignInt(0)
}
func (_Bool_IPLD__Assembler) AssignFloat(float64) error {
	return mixins.BoolAssembler{"xr.Bool_IPLD"}.AssignFloat(0)
}
func (_Bool_IPLD__Assembler) AssignString(string) error {
	return mixins.BoolAssembler{"xr.Bool_IPLD"}.AssignString("")
}
func (_Bool_IPLD__Assembler) AssignBytes([]byte) error {
	return mixins.BoolAssembler{"xr.Bool_IPLD"}.AssignBytes(nil)
}
func (_Bool_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.BoolAssembler{"xr.Bool_IPLD"}.AssignLink(nil)
}
func (na *_Bool_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bool_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBool(); err != nil {
		return err
	} else {
		return na.AssignBool(v2)
	}
}
func (_Bool_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _Bool_IPLD__Prototype{}
}
func (Bool_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bool_IPLD) Representation() ipld.Node {
	return (*_Bool_IPLD__Repr)(n)
}
type _Bool_IPLD__Repr = _Bool_IPLD
var _ ipld.Node = &_Bool_IPLD__Repr{}
type _Bool_IPLD__ReprPrototype = _Bool_IPLD__Prototype
type _Bool_IPLD__ReprAssembler = _Bool_IPLD__Assembler


func (n _Dict_IPLD) FieldTag() String {
	return &n.Tag
}
func (n _Dict_IPLD) FieldPairs() Pairs_IPLD {
	return &n.Pairs
}
type _Dict_IPLD__Maybe struct {
	m schema.Maybe
	v Dict_IPLD
}
type MaybeDict_IPLD = *_Dict_IPLD__Maybe

func (m MaybeDict_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeDict_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeDict_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeDict_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeDict_IPLD) Must() Dict_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__Dict_IPLD_Tag = _String{"Tag"}
	fieldName__Dict_IPLD_Pairs = _String{"Pairs"}
)
var _ ipld.Node = (Dict_IPLD)(&_Dict_IPLD{})
var _ schema.TypedNode = (Dict_IPLD)(&_Dict_IPLD{})
func (Dict_IPLD) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Dict_IPLD) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Tag":
		return &n.Tag, nil
	case "Pairs":
		return &n.Pairs, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Dict_IPLD) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Dict_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"xr.Dict_IPLD"}.LookupByIndex(0)
}
func (n Dict_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Dict_IPLD) MapIterator() ipld.MapIterator {
	return &_Dict_IPLD__MapItr{n, 0}
}

type _Dict_IPLD__MapItr struct {
	n Dict_IPLD
	idx  int
}

func (itr *_Dict_IPLD__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Dict_IPLD_Tag
		v = &itr.n.Tag
	case 1:
		k = &fieldName__Dict_IPLD_Pairs
		v = &itr.n.Pairs
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Dict_IPLD__MapItr) Done() bool {
	return itr.idx >= 2
}

func (Dict_IPLD) ListIterator() ipld.ListIterator {
	return nil
}
func (Dict_IPLD) Length() int64 {
	return 2
}
func (Dict_IPLD) IsAbsent() bool {
	return false
}
func (Dict_IPLD) IsNull() bool {
	return false
}
func (Dict_IPLD) AsBool() (bool, error) {
	return mixins.Map{"xr.Dict_IPLD"}.AsBool()
}
func (Dict_IPLD) AsInt() (int64, error) {
	return mixins.Map{"xr.Dict_IPLD"}.AsInt()
}
func (Dict_IPLD) AsFloat() (float64, error) {
	return mixins.Map{"xr.Dict_IPLD"}.AsFloat()
}
func (Dict_IPLD) AsString() (string, error) {
	return mixins.Map{"xr.Dict_IPLD"}.AsString()
}
func (Dict_IPLD) AsBytes() ([]byte, error) {
	return mixins.Map{"xr.Dict_IPLD"}.AsBytes()
}
func (Dict_IPLD) AsLink() (ipld.Link, error) {
	return mixins.Map{"xr.Dict_IPLD"}.AsLink()
}
func (Dict_IPLD) Prototype() ipld.NodePrototype {
	return _Dict_IPLD__Prototype{}
}
type _Dict_IPLD__Prototype struct{}

func (_Dict_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Dict_IPLD__Builder
	nb.Reset()
	return &nb
}
type _Dict_IPLD__Builder struct {
	_Dict_IPLD__Assembler
}
func (nb *_Dict_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Dict_IPLD__Builder) Reset() {
	var w _Dict_IPLD
	var m schema.Maybe
	*nb = _Dict_IPLD__Builder{_Dict_IPLD__Assembler{w: &w, m: &m}}
}
type _Dict_IPLD__Assembler struct {
	w *_Dict_IPLD
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Tag _String__Assembler
	ca_Pairs _Pairs_IPLD__Assembler
	}

func (na *_Dict_IPLD__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Tag.reset()
	na.ca_Pairs.reset()
}

var (
	fieldBit__Dict_IPLD_Tag = 1 << 0
	fieldBit__Dict_IPLD_Pairs = 1 << 1
	fieldBits__Dict_IPLD_sufficient = 0 + 1 << 0 + 1 << 1
)
func (na *_Dict_IPLD__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Dict_IPLD{}
	}
	return na, nil
}
func (_Dict_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"xr.Dict_IPLD"}.BeginList(0)
}
func (na *_Dict_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"xr.Dict_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Dict_IPLD__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"xr.Dict_IPLD"}.AssignBool(false)
}
func (_Dict_IPLD__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"xr.Dict_IPLD"}.AssignInt(0)
}
func (_Dict_IPLD__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"xr.Dict_IPLD"}.AssignFloat(0)
}
func (_Dict_IPLD__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"xr.Dict_IPLD"}.AssignString("")
}
func (_Dict_IPLD__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"xr.Dict_IPLD"}.AssignBytes(nil)
}
func (_Dict_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"xr.Dict_IPLD"}.AssignLink(nil)
}
func (na *_Dict_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Dict_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "xr.Dict_IPLD", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Dict_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _Dict_IPLD__Prototype{}
}
func (ma *_Dict_IPLD__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Tag.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Pairs.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Dict_IPLD__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Tag":
		if ma.s & fieldBit__Dict_IPLD_Tag != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Dict_IPLD_Tag}
		}
		ma.s += fieldBit__Dict_IPLD_Tag
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag, nil
	case "Pairs":
		if ma.s & fieldBit__Dict_IPLD_Pairs != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Dict_IPLD_Pairs}
		}
		ma.s += fieldBit__Dict_IPLD_Pairs
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Pairs.w = &ma.w.Pairs
		ma.ca_Pairs.m = &ma.cm
		return &ma.ca_Pairs, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName:"xr.Dict_IPLD", Key:&_String{k}}
}
func (ma *_Dict_IPLD__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Dict_IPLD__KeyAssembler)(ma)
}
func (ma *_Dict_IPLD__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag
	case 1:
		ma.ca_Pairs.w = &ma.w.Pairs
		ma.ca_Pairs.m = &ma.cm
		return &ma.ca_Pairs
	default:
		panic("unreachable")
	}
}
func (ma *_Dict_IPLD__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Dict_IPLD_sufficient != fieldBits__Dict_IPLD_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Dict_IPLD_Tag == 0 {
			err.Missing = append(err.Missing, "Tag")
		}
		if ma.s & fieldBit__Dict_IPLD_Pairs == 0 {
			err.Missing = append(err.Missing, "Pairs")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Dict_IPLD__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Dict_IPLD__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _Dict_IPLD__KeyAssembler _Dict_IPLD__Assembler
func (_Dict_IPLD__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"xr.Dict_IPLD.KeyAssembler"}.BeginMap(0)
}
func (_Dict_IPLD__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"xr.Dict_IPLD.KeyAssembler"}.BeginList(0)
}
func (na *_Dict_IPLD__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"xr.Dict_IPLD.KeyAssembler"}.AssignNull()
}
func (_Dict_IPLD__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"xr.Dict_IPLD.KeyAssembler"}.AssignBool(false)
}
func (_Dict_IPLD__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"xr.Dict_IPLD.KeyAssembler"}.AssignInt(0)
}
func (_Dict_IPLD__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"xr.Dict_IPLD.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Dict_IPLD__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Tag":
		if ka.s & fieldBit__Dict_IPLD_Tag != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Dict_IPLD_Tag}
		}
		ka.s += fieldBit__Dict_IPLD_Tag
		ka.state = maState_expectValue
		ka.f = 0
	case "Pairs":
		if ka.s & fieldBit__Dict_IPLD_Pairs != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Dict_IPLD_Pairs}
		}
		ka.s += fieldBit__Dict_IPLD_Pairs
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName:"xr.Dict_IPLD", Key:&_String{k}}
	}
	return nil
}
func (_Dict_IPLD__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"xr.Dict_IPLD.KeyAssembler"}.AssignBytes(nil)
}
func (_Dict_IPLD__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"xr.Dict_IPLD.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Dict_IPLD__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Dict_IPLD__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Dict_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Dict_IPLD) Representation() ipld.Node {
	return (*_Dict_IPLD__Repr)(n)
}
type _Dict_IPLD__Repr _Dict_IPLD
var (
	fieldName__Dict_IPLD_Tag_serial = _String{"Tag"}
	fieldName__Dict_IPLD_Pairs_serial = _String{"Pairs"}
)
var _ ipld.Node = &_Dict_IPLD__Repr{}
func (_Dict_IPLD__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_Dict_IPLD__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Tag":
		return n.Tag.Representation(), nil
	case "Pairs":
		return n.Pairs.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_Dict_IPLD__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Dict_IPLD__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"xr.Dict_IPLD.Repr"}.LookupByIndex(0)
}
func (n _Dict_IPLD__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Dict_IPLD__Repr) MapIterator() ipld.MapIterator {
	return &_Dict_IPLD__ReprMapItr{n, 0}
}

type _Dict_IPLD__ReprMapItr struct {
	n   *_Dict_IPLD__Repr
	idx int
	
}

func (itr *_Dict_IPLD__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Dict_IPLD_Tag_serial
		v = itr.n.Tag.Representation()
	case 1:
		k = &fieldName__Dict_IPLD_Pairs_serial
		v = itr.n.Pairs.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Dict_IPLD__ReprMapItr) Done() bool {
	return itr.idx >= 2
}
func (_Dict_IPLD__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_Dict_IPLD__Repr) Length() int64 {
	l := 2
	return int64(l)
}
func (_Dict_IPLD__Repr) IsAbsent() bool {
	return false
}
func (_Dict_IPLD__Repr) IsNull() bool {
	return false
}
func (_Dict_IPLD__Repr) AsBool() (bool, error) {
	return mixins.Map{"xr.Dict_IPLD.Repr"}.AsBool()
}
func (_Dict_IPLD__Repr) AsInt() (int64, error) {
	return mixins.Map{"xr.Dict_IPLD.Repr"}.AsInt()
}
func (_Dict_IPLD__Repr) AsFloat() (float64, error) {
	return mixins.Map{"xr.Dict_IPLD.Repr"}.AsFloat()
}
func (_Dict_IPLD__Repr) AsString() (string, error) {
	return mixins.Map{"xr.Dict_IPLD.Repr"}.AsString()
}
func (_Dict_IPLD__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"xr.Dict_IPLD.Repr"}.AsBytes()
}
func (_Dict_IPLD__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"xr.Dict_IPLD.Repr"}.AsLink()
}
func (_Dict_IPLD__Repr) Prototype() ipld.NodePrototype {
	return _Dict_IPLD__ReprPrototype{}
}
type _Dict_IPLD__ReprPrototype struct{}

func (_Dict_IPLD__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Dict_IPLD__ReprBuilder
	nb.Reset()
	return &nb
}
type _Dict_IPLD__ReprBuilder struct {
	_Dict_IPLD__ReprAssembler
}
func (nb *_Dict_IPLD__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Dict_IPLD__ReprBuilder) Reset() {
	var w _Dict_IPLD
	var m schema.Maybe
	*nb = _Dict_IPLD__ReprBuilder{_Dict_IPLD__ReprAssembler{w: &w, m: &m}}
}
type _Dict_IPLD__ReprAssembler struct {
	w *_Dict_IPLD
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Tag _String__ReprAssembler
	ca_Pairs _Pairs_IPLD__ReprAssembler
	}

func (na *_Dict_IPLD__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Tag.reset()
	na.ca_Pairs.reset()
}
func (na *_Dict_IPLD__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Dict_IPLD{}
	}
	return na, nil
}
func (_Dict_IPLD__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"xr.Dict_IPLD.Repr"}.BeginList(0)
}
func (na *_Dict_IPLD__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"xr.Dict_IPLD.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Dict_IPLD__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"xr.Dict_IPLD.Repr"}.AssignBool(false)
}
func (_Dict_IPLD__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{"xr.Dict_IPLD.Repr"}.AssignInt(0)
}
func (_Dict_IPLD__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"xr.Dict_IPLD.Repr"}.AssignFloat(0)
}
func (_Dict_IPLD__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"xr.Dict_IPLD.Repr"}.AssignString("")
}
func (_Dict_IPLD__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"xr.Dict_IPLD.Repr"}.AssignBytes(nil)
}
func (_Dict_IPLD__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"xr.Dict_IPLD.Repr"}.AssignLink(nil)
}
func (na *_Dict_IPLD__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Dict_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "xr.Dict_IPLD.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Dict_IPLD__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Dict_IPLD__ReprPrototype{}
}
func (ma *_Dict_IPLD__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Dict_IPLD__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Tag":
		if ma.s & fieldBit__Dict_IPLD_Tag != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Dict_IPLD_Tag_serial}
		}
		ma.s += fieldBit__Dict_IPLD_Tag
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag, nil
	case "Pairs":
		if ma.s & fieldBit__Dict_IPLD_Pairs != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Dict_IPLD_Pairs_serial}
		}
		ma.s += fieldBit__Dict_IPLD_Pairs
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Pairs.w = &ma.w.Pairs
		ma.ca_Pairs.m = &ma.cm
		return &ma.ca_Pairs, nil
	default:
	}
	return nil, ipld.ErrInvalidKey{TypeName:"xr.Dict_IPLD.Repr", Key:&_String{k}}
}
func (ma *_Dict_IPLD__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Dict_IPLD__ReprKeyAssembler)(ma)
}
func (ma *_Dict_IPLD__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag
	case 1:
		ma.ca_Pairs.w = &ma.w.Pairs
		ma.ca_Pairs.m = &ma.cm
		return &ma.ca_Pairs
	default:
		panic("unreachable")
	}
}
func (ma *_Dict_IPLD__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Dict_IPLD_sufficient != fieldBits__Dict_IPLD_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Dict_IPLD_Tag == 0 {
			err.Missing = append(err.Missing, "Tag")
		}
		if ma.s & fieldBit__Dict_IPLD_Pairs == 0 {
			err.Missing = append(err.Missing, "Pairs")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Dict_IPLD__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Dict_IPLD__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _Dict_IPLD__ReprKeyAssembler _Dict_IPLD__ReprAssembler
func (_Dict_IPLD__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"xr.Dict_IPLD.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Dict_IPLD__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"xr.Dict_IPLD.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Dict_IPLD__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"xr.Dict_IPLD.Repr.KeyAssembler"}.AssignNull()
}
func (_Dict_IPLD__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"xr.Dict_IPLD.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Dict_IPLD__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"xr.Dict_IPLD.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Dict_IPLD__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"xr.Dict_IPLD.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Dict_IPLD__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Tag":
		if ka.s & fieldBit__Dict_IPLD_Tag != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Dict_IPLD_Tag_serial}
		}
		ka.s += fieldBit__Dict_IPLD_Tag
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Pairs":
		if ka.s & fieldBit__Dict_IPLD_Pairs != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Dict_IPLD_Pairs_serial}
		}
		ka.s += fieldBit__Dict_IPLD_Pairs
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	}
	return ipld.ErrInvalidKey{TypeName:"xr.Dict_IPLD.Repr", Key:&_String{k}}
}
func (_Dict_IPLD__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"xr.Dict_IPLD.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Dict_IPLD__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"xr.Dict_IPLD.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Dict_IPLD__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Dict_IPLD__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n Float_IPLD) Float() float64 {
	return n.x
}
func (_Float_IPLD__Prototype) FromFloat(v float64) (Float_IPLD, error) {
	n := _Float_IPLD{v}
	return &n, nil
}
type _Float_IPLD__Maybe struct {
	m schema.Maybe
	v Float_IPLD
}
type MaybeFloat_IPLD = *_Float_IPLD__Maybe

func (m MaybeFloat_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeFloat_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeFloat_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeFloat_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeFloat_IPLD) Must() Float_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Float_IPLD)(&_Float_IPLD{})
var _ schema.TypedNode = (Float_IPLD)(&_Float_IPLD{})
func (Float_IPLD) Kind() ipld.Kind {
	return ipld.Kind_Float
}
func (Float_IPLD) LookupByString(string) (ipld.Node, error) {
	return mixins.Float{"xr.Float_IPLD"}.LookupByString("")
}
func (Float_IPLD) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Float{"xr.Float_IPLD"}.LookupByNode(nil)
}
func (Float_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Float{"xr.Float_IPLD"}.LookupByIndex(0)
}
func (Float_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Float{"xr.Float_IPLD"}.LookupBySegment(seg)
}
func (Float_IPLD) MapIterator() ipld.MapIterator {
	return nil
}
func (Float_IPLD) ListIterator() ipld.ListIterator {
	return nil
}
func (Float_IPLD) Length() int64 {
	return -1
}
func (Float_IPLD) IsAbsent() bool {
	return false
}
func (Float_IPLD) IsNull() bool {
	return false
}
func (Float_IPLD) AsBool() (bool, error) {
	return mixins.Float{"xr.Float_IPLD"}.AsBool()
}
func (Float_IPLD) AsInt() (int64, error) {
	return mixins.Float{"xr.Float_IPLD"}.AsInt()
}
func (n Float_IPLD) AsFloat() (float64, error) {
	return n.x, nil
}
func (Float_IPLD) AsString() (string, error) {
	return mixins.Float{"xr.Float_IPLD"}.AsString()
}
func (Float_IPLD) AsBytes() ([]byte, error) {
	return mixins.Float{"xr.Float_IPLD"}.AsBytes()
}
func (Float_IPLD) AsLink() (ipld.Link, error) {
	return mixins.Float{"xr.Float_IPLD"}.AsLink()
}
func (Float_IPLD) Prototype() ipld.NodePrototype {
	return _Float_IPLD__Prototype{}
}
type _Float_IPLD__Prototype struct{}

func (_Float_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Float_IPLD__Builder
	nb.Reset()
	return &nb
}
type _Float_IPLD__Builder struct {
	_Float_IPLD__Assembler
}
func (nb *_Float_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Float_IPLD__Builder) Reset() {
	var w _Float_IPLD
	var m schema.Maybe
	*nb = _Float_IPLD__Builder{_Float_IPLD__Assembler{w: &w, m: &m}}
}
type _Float_IPLD__Assembler struct {
	w *_Float_IPLD
	m *schema.Maybe
}

func (na *_Float_IPLD__Assembler) reset() {}
func (_Float_IPLD__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.FloatAssembler{"xr.Float_IPLD"}.BeginMap(0)
}
func (_Float_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.FloatAssembler{"xr.Float_IPLD"}.BeginList(0)
}
func (na *_Float_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.FloatAssembler{"xr.Float_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Float_IPLD__Assembler) AssignBool(bool) error {
	return mixins.FloatAssembler{"xr.Float_IPLD"}.AssignBool(false)
}
func (_Float_IPLD__Assembler) AssignInt(int64) error {
	return mixins.FloatAssembler{"xr.Float_IPLD"}.AssignInt(0)
}
func (na *_Float_IPLD__Assembler) AssignFloat(v float64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Float_IPLD{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Float_IPLD__Assembler) AssignString(string) error {
	return mixins.FloatAssembler{"xr.Float_IPLD"}.AssignString("")
}
func (_Float_IPLD__Assembler) AssignBytes([]byte) error {
	return mixins.FloatAssembler{"xr.Float_IPLD"}.AssignBytes(nil)
}
func (_Float_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.FloatAssembler{"xr.Float_IPLD"}.AssignLink(nil)
}
func (na *_Float_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Float_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsFloat(); err != nil {
		return err
	} else {
		return na.AssignFloat(v2)
	}
}
func (_Float_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _Float_IPLD__Prototype{}
}
func (Float_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Float_IPLD) Representation() ipld.Node {
	return (*_Float_IPLD__Repr)(n)
}
type _Float_IPLD__Repr = _Float_IPLD
var _ ipld.Node = &_Float_IPLD__Repr{}
type _Float_IPLD__ReprPrototype = _Float_IPLD__Prototype
type _Float_IPLD__ReprAssembler = _Float_IPLD__Assembler

func (n Int_IPLD) Int() int64 {
	return n.x
}
func (_Int_IPLD__Prototype) FromInt(v int64) (Int_IPLD, error) {
	n := _Int_IPLD{v}
	return &n, nil
}
type _Int_IPLD__Maybe struct {
	m schema.Maybe
	v Int_IPLD
}
type MaybeInt_IPLD = *_Int_IPLD__Maybe

func (m MaybeInt_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeInt_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeInt_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeInt_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeInt_IPLD) Must() Int_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Int_IPLD)(&_Int_IPLD{})
var _ schema.TypedNode = (Int_IPLD)(&_Int_IPLD{})
func (Int_IPLD) Kind() ipld.Kind {
	return ipld.Kind_Int
}
func (Int_IPLD) LookupByString(string) (ipld.Node, error) {
	return mixins.Int{"xr.Int_IPLD"}.LookupByString("")
}
func (Int_IPLD) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Int{"xr.Int_IPLD"}.LookupByNode(nil)
}
func (Int_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Int{"xr.Int_IPLD"}.LookupByIndex(0)
}
func (Int_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Int{"xr.Int_IPLD"}.LookupBySegment(seg)
}
func (Int_IPLD) MapIterator() ipld.MapIterator {
	return nil
}
func (Int_IPLD) ListIterator() ipld.ListIterator {
	return nil
}
func (Int_IPLD) Length() int64 {
	return -1
}
func (Int_IPLD) IsAbsent() bool {
	return false
}
func (Int_IPLD) IsNull() bool {
	return false
}
func (Int_IPLD) AsBool() (bool, error) {
	return mixins.Int{"xr.Int_IPLD"}.AsBool()
}
func (n Int_IPLD) AsInt() (int64, error) {
	return n.x, nil
}
func (Int_IPLD) AsFloat() (float64, error) {
	return mixins.Int{"xr.Int_IPLD"}.AsFloat()
}
func (Int_IPLD) AsString() (string, error) {
	return mixins.Int{"xr.Int_IPLD"}.AsString()
}
func (Int_IPLD) AsBytes() ([]byte, error) {
	return mixins.Int{"xr.Int_IPLD"}.AsBytes()
}
func (Int_IPLD) AsLink() (ipld.Link, error) {
	return mixins.Int{"xr.Int_IPLD"}.AsLink()
}
func (Int_IPLD) Prototype() ipld.NodePrototype {
	return _Int_IPLD__Prototype{}
}
type _Int_IPLD__Prototype struct{}

func (_Int_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Int_IPLD__Builder
	nb.Reset()
	return &nb
}
type _Int_IPLD__Builder struct {
	_Int_IPLD__Assembler
}
func (nb *_Int_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Int_IPLD__Builder) Reset() {
	var w _Int_IPLD
	var m schema.Maybe
	*nb = _Int_IPLD__Builder{_Int_IPLD__Assembler{w: &w, m: &m}}
}
type _Int_IPLD__Assembler struct {
	w *_Int_IPLD
	m *schema.Maybe
}

func (na *_Int_IPLD__Assembler) reset() {}
func (_Int_IPLD__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.IntAssembler{"xr.Int_IPLD"}.BeginMap(0)
}
func (_Int_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.IntAssembler{"xr.Int_IPLD"}.BeginList(0)
}
func (na *_Int_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.IntAssembler{"xr.Int_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Int_IPLD__Assembler) AssignBool(bool) error {
	return mixins.IntAssembler{"xr.Int_IPLD"}.AssignBool(false)
}
func (na *_Int_IPLD__Assembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Int_IPLD{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Int_IPLD__Assembler) AssignFloat(float64) error {
	return mixins.IntAssembler{"xr.Int_IPLD"}.AssignFloat(0)
}
func (_Int_IPLD__Assembler) AssignString(string) error {
	return mixins.IntAssembler{"xr.Int_IPLD"}.AssignString("")
}
func (_Int_IPLD__Assembler) AssignBytes([]byte) error {
	return mixins.IntAssembler{"xr.Int_IPLD"}.AssignBytes(nil)
}
func (_Int_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.IntAssembler{"xr.Int_IPLD"}.AssignLink(nil)
}
func (na *_Int_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Int_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsInt(); err != nil {
		return err
	} else {
		return na.AssignInt(v2)
	}
}
func (_Int_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _Int_IPLD__Prototype{}
}
func (Int_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Int_IPLD) Representation() ipld.Node {
	return (*_Int_IPLD__Repr)(n)
}
type _Int_IPLD__Repr = _Int_IPLD
var _ ipld.Node = &_Int_IPLD__Repr{}
type _Int_IPLD__ReprPrototype = _Int_IPLD__Prototype
type _Int_IPLD__ReprAssembler = _Int_IPLD__Assembler

func (n _Node_IPLD) AsInterface() _Node_IPLD__iface {
	return n.x
}
type _Node_IPLD__Maybe struct {
	m schema.Maybe
	v Node_IPLD
}
type MaybeNode_IPLD = *_Node_IPLD__Maybe

func (m MaybeNode_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeNode_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeNode_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeNode_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeNode_IPLD) Must() Node_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	memberName__Node_IPLD_String_IPLD = _String{"String_IPLD"}
	memberName__Node_IPLD_Blob_IPLD = _String{"Blob_IPLD"}
	memberName__Node_IPLD_Int_IPLD = _String{"Int_IPLD"}
	memberName__Node_IPLD_Float_IPLD = _String{"Float_IPLD"}
	memberName__Node_IPLD_Bool_IPLD = _String{"Bool_IPLD"}
	memberName__Node_IPLD_Dict_IPLD = _String{"Dict_IPLD"}
	memberName__Node_IPLD_Set_IPLD = _String{"Set_IPLD"}
)
var _ ipld.Node = (Node_IPLD)(&_Node_IPLD{})
var _ schema.TypedNode = (Node_IPLD)(&_Node_IPLD{})
func (Node_IPLD) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Node_IPLD) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "String_IPLD":
		if n2, ok := n.x.(String_IPLD); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Blob_IPLD":
		if n2, ok := n.x.(Blob_IPLD); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Int_IPLD":
		if n2, ok := n.x.(Int_IPLD); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Float_IPLD":
		if n2, ok := n.x.(Float_IPLD); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Bool_IPLD":
		if n2, ok := n.x.(Bool_IPLD); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Dict_IPLD":
		if n2, ok := n.x.(Dict_IPLD); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Set_IPLD":
		if n2, ok := n.x.(Set_IPLD); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Node_IPLD) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Node_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"xr.Node_IPLD"}.LookupByIndex(0)
}
func (n Node_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Node_IPLD) MapIterator() ipld.MapIterator {
	return &_Node_IPLD__MapItr{n, false}
}

type _Node_IPLD__MapItr struct {
	n Node_IPLD
	done bool
}

func (itr *_Node_IPLD__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch n2 := itr.n.x.(type) {
	case String_IPLD:
		k, v = &memberName__Node_IPLD_String_IPLD, n2
	case Blob_IPLD:
		k, v = &memberName__Node_IPLD_Blob_IPLD, n2
	case Int_IPLD:
		k, v = &memberName__Node_IPLD_Int_IPLD, n2
	case Float_IPLD:
		k, v = &memberName__Node_IPLD_Float_IPLD, n2
	case Bool_IPLD:
		k, v = &memberName__Node_IPLD_Bool_IPLD, n2
	case Dict_IPLD:
		k, v = &memberName__Node_IPLD_Dict_IPLD, n2
	case Set_IPLD:
		k, v = &memberName__Node_IPLD_Set_IPLD, n2
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Node_IPLD__MapItr) Done() bool {
	return itr.done
}

func (Node_IPLD) ListIterator() ipld.ListIterator {
	return nil
}
func (Node_IPLD) Length() int64 {
	return 1
}
func (Node_IPLD) IsAbsent() bool {
	return false
}
func (Node_IPLD) IsNull() bool {
	return false
}
func (Node_IPLD) AsBool() (bool, error) {
	return mixins.Map{"xr.Node_IPLD"}.AsBool()
}
func (Node_IPLD) AsInt() (int64, error) {
	return mixins.Map{"xr.Node_IPLD"}.AsInt()
}
func (Node_IPLD) AsFloat() (float64, error) {
	return mixins.Map{"xr.Node_IPLD"}.AsFloat()
}
func (Node_IPLD) AsString() (string, error) {
	return mixins.Map{"xr.Node_IPLD"}.AsString()
}
func (Node_IPLD) AsBytes() ([]byte, error) {
	return mixins.Map{"xr.Node_IPLD"}.AsBytes()
}
func (Node_IPLD) AsLink() (ipld.Link, error) {
	return mixins.Map{"xr.Node_IPLD"}.AsLink()
}
func (Node_IPLD) Prototype() ipld.NodePrototype {
	return _Node_IPLD__Prototype{}
}
type _Node_IPLD__Prototype struct{}

func (_Node_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Node_IPLD__Builder
	nb.Reset()
	return &nb
}
type _Node_IPLD__Builder struct {
	_Node_IPLD__Assembler
}
func (nb *_Node_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Node_IPLD__Builder) Reset() {
	var w _Node_IPLD
	var m schema.Maybe
	*nb = _Node_IPLD__Builder{_Node_IPLD__Assembler{w: &w, m: &m}}
}
type _Node_IPLD__Assembler struct {
	w *_Node_IPLD
	m *schema.Maybe
	state maState

	cm schema.Maybe
	ca1 *_String_IPLD__Assembler
	
	ca2 *_Blob_IPLD__Assembler
	
	ca3 *_Int_IPLD__Assembler
	
	ca4 *_Float_IPLD__Assembler
	
	ca5 *_Bool_IPLD__Assembler
	
	ca6 *_Dict_IPLD__Assembler
	
	ca7 *_Set_IPLD__Assembler
	ca uint
}
func (na *_Node_IPLD__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	
	case 2:
		na.ca2.reset()
	
	case 3:
		na.ca3.reset()
	
	case 4:
		na.ca4.reset()
	
	case 5:
		na.ca5.reset()
	
	case 6:
		na.ca6.reset()
	
	case 7:
		na.ca7.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Node_IPLD__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Node_IPLD{}
	}
	return na, nil
}
func (_Node_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"xr.Node_IPLD"}.BeginList(0)
}
func (na *_Node_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"xr.Node_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Node_IPLD__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"xr.Node_IPLD"}.AssignBool(false)
}
func (_Node_IPLD__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"xr.Node_IPLD"}.AssignInt(0)
}
func (_Node_IPLD__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"xr.Node_IPLD"}.AssignFloat(0)
}
func (_Node_IPLD__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"xr.Node_IPLD"}.AssignString("")
}
func (_Node_IPLD__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"xr.Node_IPLD"}.AssignBytes(nil)
}
func (_Node_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"xr.Node_IPLD"}.AssignLink(nil)
}
func (na *_Node_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Node_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "xr.Node_IPLD", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Node_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _Node_IPLD__Prototype{}
}
func (ma *_Node_IPLD__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Node_IPLD__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName:"xr.Node_IPLD", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "String_IPLD":
		ma.state = maState_midValue
		ma.ca = 1
		x := &_String_IPLD{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_String_IPLD__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1, nil
	case "Blob_IPLD":
		ma.state = maState_midValue
		ma.ca = 2
		x := &_Blob_IPLD{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Blob_IPLD__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2, nil
	case "Int_IPLD":
		ma.state = maState_midValue
		ma.ca = 3
		x := &_Int_IPLD{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Int_IPLD__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3, nil
	case "Float_IPLD":
		ma.state = maState_midValue
		ma.ca = 4
		x := &_Float_IPLD{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_Float_IPLD__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4, nil
	case "Bool_IPLD":
		ma.state = maState_midValue
		ma.ca = 5
		x := &_Bool_IPLD{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bool_IPLD__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5, nil
	case "Dict_IPLD":
		ma.state = maState_midValue
		ma.ca = 6
		x := &_Dict_IPLD{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Dict_IPLD__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6, nil
	case "Set_IPLD":
		ma.state = maState_midValue
		ma.ca = 7
		x := &_Set_IPLD{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_Set_IPLD__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName:"xr.Node_IPLD", Key:&_String{k}}
}
func (ma *_Node_IPLD__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Node_IPLD__KeyAssembler)(ma)
}
func (ma *_Node_IPLD__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		x := &_String_IPLD{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_String_IPLD__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1
	case 1:
		x := &_Blob_IPLD{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Blob_IPLD__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2
	case 2:
		x := &_Int_IPLD{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Int_IPLD__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3
	case 3:
		x := &_Float_IPLD{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_Float_IPLD__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4
	case 4:
		x := &_Bool_IPLD{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bool_IPLD__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5
	case 5:
		x := &_Dict_IPLD{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Dict_IPLD__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6
	case 6:
		x := &_Set_IPLD{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_Set_IPLD__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7
	default:
		panic("unreachable")
	}
}
func (ma *_Node_IPLD__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName:"xr.Node_IPLD", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Node_IPLD__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Node_IPLD__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "String_IPLD":
		return _String_IPLD__Prototype{}
	case "Blob_IPLD":
		return _Blob_IPLD__Prototype{}
	case "Int_IPLD":
		return _Int_IPLD__Prototype{}
	case "Float_IPLD":
		return _Float_IPLD__Prototype{}
	case "Bool_IPLD":
		return _Bool_IPLD__Prototype{}
	case "Dict_IPLD":
		return _Dict_IPLD__Prototype{}
	case "Set_IPLD":
		return _Set_IPLD__Prototype{}
	default:
		return nil
	}
}
type _Node_IPLD__KeyAssembler _Node_IPLD__Assembler
func (_Node_IPLD__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"xr.Node_IPLD.KeyAssembler"}.BeginMap(0)
}
func (_Node_IPLD__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"xr.Node_IPLD.KeyAssembler"}.BeginList(0)
}
func (na *_Node_IPLD__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"xr.Node_IPLD.KeyAssembler"}.AssignNull()
}
func (_Node_IPLD__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"xr.Node_IPLD.KeyAssembler"}.AssignBool(false)
}
func (_Node_IPLD__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"xr.Node_IPLD.KeyAssembler"}.AssignInt(0)
}
func (_Node_IPLD__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"xr.Node_IPLD.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Node_IPLD__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName:"xr.Node_IPLD", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "String_IPLD":
		ka.ca = 1
		ka.state = maState_expectValue
		return nil
	case "Blob_IPLD":
		ka.ca = 2
		ka.state = maState_expectValue
		return nil
	case "Int_IPLD":
		ka.ca = 3
		ka.state = maState_expectValue
		return nil
	case "Float_IPLD":
		ka.ca = 4
		ka.state = maState_expectValue
		return nil
	case "Bool_IPLD":
		ka.ca = 5
		ka.state = maState_expectValue
		return nil
	case "Dict_IPLD":
		ka.ca = 6
		ka.state = maState_expectValue
		return nil
	case "Set_IPLD":
		ka.ca = 7
		ka.state = maState_expectValue
		return nil
	}
	return ipld.ErrInvalidKey{TypeName:"xr.Node_IPLD", Key:&_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Node_IPLD__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"xr.Node_IPLD.KeyAssembler"}.AssignBytes(nil)
}
func (_Node_IPLD__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"xr.Node_IPLD.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Node_IPLD__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Node_IPLD__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Node_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Node_IPLD) Representation() ipld.Node {
	return (*_Node_IPLD__Repr)(n)
}
type _Node_IPLD__Repr _Node_IPLD
var (
	memberName__Node_IPLD_String_IPLD_serial = _String{"String"}
	memberName__Node_IPLD_Blob_IPLD_serial = _String{"Blob"}
	memberName__Node_IPLD_Int_IPLD_serial = _String{"Int"}
	memberName__Node_IPLD_Float_IPLD_serial = _String{"Float"}
	memberName__Node_IPLD_Bool_IPLD_serial = _String{"Bool"}
	memberName__Node_IPLD_Dict_IPLD_serial = _String{"Dict"}
	memberName__Node_IPLD_Set_IPLD_serial = _String{"Set"}
)
var _ ipld.Node = &_Node_IPLD__Repr{}
func (_Node_IPLD__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_Node_IPLD__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "String":
		if n2, ok := n.x.(String_IPLD); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Blob":
		if n2, ok := n.x.(Blob_IPLD); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Int":
		if n2, ok := n.x.(Int_IPLD); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Float":
		if n2, ok := n.x.(Float_IPLD); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Bool":
		if n2, ok := n.x.(Bool_IPLD); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Dict":
		if n2, ok := n.x.(Dict_IPLD); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Set":
		if n2, ok := n.x.(Set_IPLD); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_Node_IPLD__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Node_IPLD__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"xr.Node_IPLD.Repr"}.LookupByIndex(0)
}
func (n _Node_IPLD__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Node_IPLD__Repr) MapIterator() ipld.MapIterator {
	return &_Node_IPLD__ReprMapItr{n, false}
}

type _Node_IPLD__ReprMapItr struct {
	n *_Node_IPLD__Repr
	done bool
}

func (itr *_Node_IPLD__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch n2 := itr.n.x.(type) {
	case String_IPLD:
		k, v = &memberName__Node_IPLD_String_IPLD_serial, n2.Representation()
	case Blob_IPLD:
		k, v = &memberName__Node_IPLD_Blob_IPLD_serial, n2.Representation()
	case Int_IPLD:
		k, v = &memberName__Node_IPLD_Int_IPLD_serial, n2.Representation()
	case Float_IPLD:
		k, v = &memberName__Node_IPLD_Float_IPLD_serial, n2.Representation()
	case Bool_IPLD:
		k, v = &memberName__Node_IPLD_Bool_IPLD_serial, n2.Representation()
	case Dict_IPLD:
		k, v = &memberName__Node_IPLD_Dict_IPLD_serial, n2.Representation()
	case Set_IPLD:
		k, v = &memberName__Node_IPLD_Set_IPLD_serial, n2.Representation()
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Node_IPLD__ReprMapItr) Done() bool {
	return itr.done
}

func (_Node_IPLD__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (_Node_IPLD__Repr) Length() int64 {
	return 1
}
func (_Node_IPLD__Repr) IsAbsent() bool {
	return false
}
func (_Node_IPLD__Repr) IsNull() bool {
	return false
}
func (_Node_IPLD__Repr) AsBool() (bool, error) {
	return mixins.Map{"xr.Node_IPLD.Repr"}.AsBool()
}
func (_Node_IPLD__Repr) AsInt() (int64, error) {
	return mixins.Map{"xr.Node_IPLD.Repr"}.AsInt()
}
func (_Node_IPLD__Repr) AsFloat() (float64, error) {
	return mixins.Map{"xr.Node_IPLD.Repr"}.AsFloat()
}
func (_Node_IPLD__Repr) AsString() (string, error) {
	return mixins.Map{"xr.Node_IPLD.Repr"}.AsString()
}
func (_Node_IPLD__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"xr.Node_IPLD.Repr"}.AsBytes()
}
func (_Node_IPLD__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"xr.Node_IPLD.Repr"}.AsLink()
}
func (_Node_IPLD__Repr) Prototype() ipld.NodePrototype {
	return _Node_IPLD__ReprPrototype{}
}
type _Node_IPLD__ReprPrototype struct{}

func (_Node_IPLD__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Node_IPLD__ReprBuilder
	nb.Reset()
	return &nb
}
type _Node_IPLD__ReprBuilder struct {
	_Node_IPLD__ReprAssembler
}
func (nb *_Node_IPLD__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Node_IPLD__ReprBuilder) Reset() {
	var w _Node_IPLD
	var m schema.Maybe
	*nb = _Node_IPLD__ReprBuilder{_Node_IPLD__ReprAssembler{w: &w, m: &m}}
}
type _Node_IPLD__ReprAssembler struct {
	w *_Node_IPLD
	m *schema.Maybe
	state maState

	cm schema.Maybe
	ca1 *_String_IPLD__ReprAssembler
	
	ca2 *_Blob_IPLD__ReprAssembler
	
	ca3 *_Int_IPLD__ReprAssembler
	
	ca4 *_Float_IPLD__ReprAssembler
	
	ca5 *_Bool_IPLD__ReprAssembler
	
	ca6 *_Dict_IPLD__ReprAssembler
	
	ca7 *_Set_IPLD__ReprAssembler
	ca uint
}
func (na *_Node_IPLD__ReprAssembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	
	case 2:
		na.ca2.reset()
	
	case 3:
		na.ca3.reset()
	
	case 4:
		na.ca4.reset()
	
	case 5:
		na.ca5.reset()
	
	case 6:
		na.ca6.reset()
	
	case 7:
		na.ca7.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Node_IPLD__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Node_IPLD{}
	}
	return na, nil
}
func (_Node_IPLD__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"xr.Node_IPLD.Repr"}.BeginList(0)
}
func (na *_Node_IPLD__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"xr.Node_IPLD.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Node_IPLD__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"xr.Node_IPLD.Repr"}.AssignBool(false)
}
func (_Node_IPLD__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{"xr.Node_IPLD.Repr"}.AssignInt(0)
}
func (_Node_IPLD__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"xr.Node_IPLD.Repr"}.AssignFloat(0)
}
func (_Node_IPLD__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"xr.Node_IPLD.Repr"}.AssignString("")
}
func (_Node_IPLD__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"xr.Node_IPLD.Repr"}.AssignBytes(nil)
}
func (_Node_IPLD__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"xr.Node_IPLD.Repr"}.AssignLink(nil)
}
func (na *_Node_IPLD__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Node_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "xr.Node_IPLD.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Node_IPLD__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Node_IPLD__ReprPrototype{}
}
func (ma *_Node_IPLD__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Node_IPLD__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName:"xr.Node_IPLD.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "String":
		ma.state = maState_midValue
		ma.ca = 1
		x := &_String_IPLD{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_String_IPLD__ReprAssembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1, nil
	case "Blob":
		ma.state = maState_midValue
		ma.ca = 2
		x := &_Blob_IPLD{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Blob_IPLD__ReprAssembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2, nil
	case "Int":
		ma.state = maState_midValue
		ma.ca = 3
		x := &_Int_IPLD{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Int_IPLD__ReprAssembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3, nil
	case "Float":
		ma.state = maState_midValue
		ma.ca = 4
		x := &_Float_IPLD{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_Float_IPLD__ReprAssembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4, nil
	case "Bool":
		ma.state = maState_midValue
		ma.ca = 5
		x := &_Bool_IPLD{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bool_IPLD__ReprAssembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5, nil
	case "Dict":
		ma.state = maState_midValue
		ma.ca = 6
		x := &_Dict_IPLD{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Dict_IPLD__ReprAssembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6, nil
	case "Set":
		ma.state = maState_midValue
		ma.ca = 7
		x := &_Set_IPLD{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_Set_IPLD__ReprAssembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName:"xr.Node_IPLD.Repr", Key:&_String{k}}
}
func (ma *_Node_IPLD__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Node_IPLD__ReprKeyAssembler)(ma)
}
func (ma *_Node_IPLD__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		x := &_String_IPLD{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_String_IPLD__ReprAssembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1
	case 1:
		x := &_Blob_IPLD{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Blob_IPLD__ReprAssembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2
	case 2:
		x := &_Int_IPLD{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Int_IPLD__ReprAssembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3
	case 3:
		x := &_Float_IPLD{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_Float_IPLD__ReprAssembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4
	case 4:
		x := &_Bool_IPLD{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bool_IPLD__ReprAssembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5
	case 5:
		x := &_Dict_IPLD{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Dict_IPLD__ReprAssembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6
	case 6:
		x := &_Set_IPLD{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_Set_IPLD__ReprAssembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7
	default:
		panic("unreachable")
	}
}
func (ma *_Node_IPLD__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName:"xr.Node_IPLD.Repr", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Node_IPLD__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Node_IPLD__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "String_IPLD":
		return _String_IPLD__ReprPrototype{}
	case "Blob_IPLD":
		return _Blob_IPLD__ReprPrototype{}
	case "Int_IPLD":
		return _Int_IPLD__ReprPrototype{}
	case "Float_IPLD":
		return _Float_IPLD__ReprPrototype{}
	case "Bool_IPLD":
		return _Bool_IPLD__ReprPrototype{}
	case "Dict_IPLD":
		return _Dict_IPLD__ReprPrototype{}
	case "Set_IPLD":
		return _Set_IPLD__ReprPrototype{}
	default:
		return nil
	}
}
type _Node_IPLD__ReprKeyAssembler _Node_IPLD__ReprAssembler
func (_Node_IPLD__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"xr.Node_IPLD.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Node_IPLD__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"xr.Node_IPLD.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Node_IPLD__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"xr.Node_IPLD.Repr.KeyAssembler"}.AssignNull()
}
func (_Node_IPLD__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"xr.Node_IPLD.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Node_IPLD__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"xr.Node_IPLD.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Node_IPLD__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"xr.Node_IPLD.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Node_IPLD__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName:"xr.Node_IPLD.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "String":
		ka.ca = 1
		ka.state = maState_expectValue
		return nil
	case "Blob":
		ka.ca = 2
		ka.state = maState_expectValue
		return nil
	case "Int":
		ka.ca = 3
		ka.state = maState_expectValue
		return nil
	case "Float":
		ka.ca = 4
		ka.state = maState_expectValue
		return nil
	case "Bool":
		ka.ca = 5
		ka.state = maState_expectValue
		return nil
	case "Dict":
		ka.ca = 6
		ka.state = maState_expectValue
		return nil
	case "Set":
		ka.ca = 7
		ka.state = maState_expectValue
		return nil
	}
	return ipld.ErrInvalidKey{TypeName:"xr.Node_IPLD.Repr", Key:&_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Node_IPLD__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"xr.Node_IPLD.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Node_IPLD__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"xr.Node_IPLD.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Node_IPLD__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Node_IPLD__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n *_Nodes_IPLD) Lookup(idx int64) Node_IPLD {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_Nodes_IPLD) LookupMaybe(idx int64) MaybeNode_IPLD {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Node_IPLD__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _Nodes_IPLD__valueAbsent = _Node_IPLD__Maybe{m:schema.Maybe_Absent}
func (n Nodes_IPLD) Iterator() *Nodes_IPLD__Itr {
	return &Nodes_IPLD__Itr{n, 0}
}

type Nodes_IPLD__Itr struct {
	n Nodes_IPLD
	idx  int
}

func (itr *Nodes_IPLD__Itr) Next() (idx int64, v Node_IPLD) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *Nodes_IPLD__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _Nodes_IPLD__Maybe struct {
	m schema.Maybe
	v Nodes_IPLD
}
type MaybeNodes_IPLD = *_Nodes_IPLD__Maybe

func (m MaybeNodes_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeNodes_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeNodes_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeNodes_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeNodes_IPLD) Must() Nodes_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Nodes_IPLD)(&_Nodes_IPLD{})
var _ schema.TypedNode = (Nodes_IPLD)(&_Nodes_IPLD{})
func (Nodes_IPLD) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (Nodes_IPLD) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"xr.Nodes_IPLD"}.LookupByString("")
}
func (n Nodes_IPLD) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n Nodes_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n Nodes_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "xr.Nodes_IPLD", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (Nodes_IPLD) MapIterator() ipld.MapIterator {
	return nil
}
func (n Nodes_IPLD) ListIterator() ipld.ListIterator {
	return &_Nodes_IPLD__ListItr{n, 0}
}

type _Nodes_IPLD__ListItr struct {
	n Nodes_IPLD
	idx  int
}

func (itr *_Nodes_IPLD__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_Nodes_IPLD__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n Nodes_IPLD) Length() int64 {
	return int64(len(n.x))
}
func (Nodes_IPLD) IsAbsent() bool {
	return false
}
func (Nodes_IPLD) IsNull() bool {
	return false
}
func (Nodes_IPLD) AsBool() (bool, error) {
	return mixins.List{"xr.Nodes_IPLD"}.AsBool()
}
func (Nodes_IPLD) AsInt() (int64, error) {
	return mixins.List{"xr.Nodes_IPLD"}.AsInt()
}
func (Nodes_IPLD) AsFloat() (float64, error) {
	return mixins.List{"xr.Nodes_IPLD"}.AsFloat()
}
func (Nodes_IPLD) AsString() (string, error) {
	return mixins.List{"xr.Nodes_IPLD"}.AsString()
}
func (Nodes_IPLD) AsBytes() ([]byte, error) {
	return mixins.List{"xr.Nodes_IPLD"}.AsBytes()
}
func (Nodes_IPLD) AsLink() (ipld.Link, error) {
	return mixins.List{"xr.Nodes_IPLD"}.AsLink()
}
func (Nodes_IPLD) Prototype() ipld.NodePrototype {
	return _Nodes_IPLD__Prototype{}
}
type _Nodes_IPLD__Prototype struct{}

func (_Nodes_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Nodes_IPLD__Builder
	nb.Reset()
	return &nb
}
type _Nodes_IPLD__Builder struct {
	_Nodes_IPLD__Assembler
}
func (nb *_Nodes_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Nodes_IPLD__Builder) Reset() {
	var w _Nodes_IPLD
	var m schema.Maybe
	*nb = _Nodes_IPLD__Builder{_Nodes_IPLD__Assembler{w: &w, m: &m}}
}
type _Nodes_IPLD__Assembler struct {
	w *_Nodes_IPLD
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _Node_IPLD__Assembler
}

func (na *_Nodes_IPLD__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Nodes_IPLD__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"xr.Nodes_IPLD"}.BeginMap(0)
}
func (na *_Nodes_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_Nodes_IPLD{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Node_IPLD, 0, sizeHint)
	}
	return na, nil
}
func (na *_Nodes_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"xr.Nodes_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Nodes_IPLD__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD"}.AssignBool(false)
}
func (_Nodes_IPLD__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD"}.AssignInt(0)
}
func (_Nodes_IPLD__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD"}.AssignFloat(0)
}
func (_Nodes_IPLD__Assembler) AssignString(string) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD"}.AssignString("")
}
func (_Nodes_IPLD__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD"}.AssignBytes(nil)
}
func (_Nodes_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD"}.AssignLink(nil)
}
func (na *_Nodes_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Nodes_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "xr.Nodes_IPLD", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Nodes_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _Nodes_IPLD__Prototype{}
}
func (la *_Nodes_IPLD__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Nodes_IPLD__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Node_IPLD{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Nodes_IPLD__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Nodes_IPLD__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Node_IPLD__Prototype{}
}
func (Nodes_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Nodes_IPLD) Representation() ipld.Node {
	return (*_Nodes_IPLD__Repr)(n)
}
type _Nodes_IPLD__Repr _Nodes_IPLD
var _ ipld.Node = &_Nodes_IPLD__Repr{}
func (_Nodes_IPLD__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_Nodes_IPLD__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"xr.Nodes_IPLD.Repr"}.LookupByString("")
}
func (nr *_Nodes_IPLD__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (Nodes_IPLD)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Node_IPLD).Representation(), nil
}
func (nr *_Nodes_IPLD__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (Nodes_IPLD)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Node_IPLD).Representation(), nil
}
func (n _Nodes_IPLD__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "xr.Nodes_IPLD.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_Nodes_IPLD__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_Nodes_IPLD__Repr) ListIterator() ipld.ListIterator {
	return &_Nodes_IPLD__ReprListItr{(Nodes_IPLD)(nr), 0}
}

type _Nodes_IPLD__ReprListItr _Nodes_IPLD__ListItr

func (itr *_Nodes_IPLD__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_Nodes_IPLD__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(Node_IPLD).Representation(), nil
}
func (itr *_Nodes_IPLD__ReprListItr) Done() bool {
	return (*_Nodes_IPLD__ListItr)(itr).Done()
}

func (rn *_Nodes_IPLD__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_Nodes_IPLD__Repr) IsAbsent() bool {
	return false
}
func (_Nodes_IPLD__Repr) IsNull() bool {
	return false
}
func (_Nodes_IPLD__Repr) AsBool() (bool, error) {
	return mixins.List{"xr.Nodes_IPLD.Repr"}.AsBool()
}
func (_Nodes_IPLD__Repr) AsInt() (int64, error) {
	return mixins.List{"xr.Nodes_IPLD.Repr"}.AsInt()
}
func (_Nodes_IPLD__Repr) AsFloat() (float64, error) {
	return mixins.List{"xr.Nodes_IPLD.Repr"}.AsFloat()
}
func (_Nodes_IPLD__Repr) AsString() (string, error) {
	return mixins.List{"xr.Nodes_IPLD.Repr"}.AsString()
}
func (_Nodes_IPLD__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"xr.Nodes_IPLD.Repr"}.AsBytes()
}
func (_Nodes_IPLD__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"xr.Nodes_IPLD.Repr"}.AsLink()
}
func (_Nodes_IPLD__Repr) Prototype() ipld.NodePrototype {
	return _Nodes_IPLD__ReprPrototype{}
}
type _Nodes_IPLD__ReprPrototype struct{}

func (_Nodes_IPLD__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Nodes_IPLD__ReprBuilder
	nb.Reset()
	return &nb
}
type _Nodes_IPLD__ReprBuilder struct {
	_Nodes_IPLD__ReprAssembler
}
func (nb *_Nodes_IPLD__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Nodes_IPLD__ReprBuilder) Reset() {
	var w _Nodes_IPLD
	var m schema.Maybe
	*nb = _Nodes_IPLD__ReprBuilder{_Nodes_IPLD__ReprAssembler{w: &w, m: &m}}
}
type _Nodes_IPLD__ReprAssembler struct {
	w *_Nodes_IPLD
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _Node_IPLD__ReprAssembler
}

func (na *_Nodes_IPLD__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Nodes_IPLD__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"xr.Nodes_IPLD.Repr"}.BeginMap(0)
}
func (na *_Nodes_IPLD__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_Nodes_IPLD{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Node_IPLD, 0, sizeHint)
	}
	return na, nil
}
func (na *_Nodes_IPLD__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"xr.Nodes_IPLD.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Nodes_IPLD__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD.Repr"}.AssignBool(false)
}
func (_Nodes_IPLD__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD.Repr"}.AssignInt(0)
}
func (_Nodes_IPLD__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD.Repr"}.AssignFloat(0)
}
func (_Nodes_IPLD__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD.Repr"}.AssignString("")
}
func (_Nodes_IPLD__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD.Repr"}.AssignBytes(nil)
}
func (_Nodes_IPLD__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"xr.Nodes_IPLD.Repr"}.AssignLink(nil)
}
func (na *_Nodes_IPLD__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Nodes_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "xr.Nodes_IPLD.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Nodes_IPLD__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Nodes_IPLD__ReprPrototype{}
}
func (la *_Nodes_IPLD__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Nodes_IPLD__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Node_IPLD{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Nodes_IPLD__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Nodes_IPLD__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Node_IPLD__ReprPrototype{}
}


func (n _Pair_IPLD) FieldKey() Node_IPLD {
	return &n.Key
}
func (n _Pair_IPLD) FieldValue() Node_IPLD {
	return &n.Value
}
type _Pair_IPLD__Maybe struct {
	m schema.Maybe
	v Pair_IPLD
}
type MaybePair_IPLD = *_Pair_IPLD__Maybe

func (m MaybePair_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybePair_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybePair_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybePair_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybePair_IPLD) Must() Pair_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__Pair_IPLD_Key = _String{"Key"}
	fieldName__Pair_IPLD_Value = _String{"Value"}
)
var _ ipld.Node = (Pair_IPLD)(&_Pair_IPLD{})
var _ schema.TypedNode = (Pair_IPLD)(&_Pair_IPLD{})
func (Pair_IPLD) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Pair_IPLD) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Key":
		return &n.Key, nil
	case "Value":
		return &n.Value, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Pair_IPLD) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Pair_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"xr.Pair_IPLD"}.LookupByIndex(0)
}
func (n Pair_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Pair_IPLD) MapIterator() ipld.MapIterator {
	return &_Pair_IPLD__MapItr{n, 0}
}

type _Pair_IPLD__MapItr struct {
	n Pair_IPLD
	idx  int
}

func (itr *_Pair_IPLD__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Pair_IPLD_Key
		v = &itr.n.Key
	case 1:
		k = &fieldName__Pair_IPLD_Value
		v = &itr.n.Value
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Pair_IPLD__MapItr) Done() bool {
	return itr.idx >= 2
}

func (Pair_IPLD) ListIterator() ipld.ListIterator {
	return nil
}
func (Pair_IPLD) Length() int64 {
	return 2
}
func (Pair_IPLD) IsAbsent() bool {
	return false
}
func (Pair_IPLD) IsNull() bool {
	return false
}
func (Pair_IPLD) AsBool() (bool, error) {
	return mixins.Map{"xr.Pair_IPLD"}.AsBool()
}
func (Pair_IPLD) AsInt() (int64, error) {
	return mixins.Map{"xr.Pair_IPLD"}.AsInt()
}
func (Pair_IPLD) AsFloat() (float64, error) {
	return mixins.Map{"xr.Pair_IPLD"}.AsFloat()
}
func (Pair_IPLD) AsString() (string, error) {
	return mixins.Map{"xr.Pair_IPLD"}.AsString()
}
func (Pair_IPLD) AsBytes() ([]byte, error) {
	return mixins.Map{"xr.Pair_IPLD"}.AsBytes()
}
func (Pair_IPLD) AsLink() (ipld.Link, error) {
	return mixins.Map{"xr.Pair_IPLD"}.AsLink()
}
func (Pair_IPLD) Prototype() ipld.NodePrototype {
	return _Pair_IPLD__Prototype{}
}
type _Pair_IPLD__Prototype struct{}

func (_Pair_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Pair_IPLD__Builder
	nb.Reset()
	return &nb
}
type _Pair_IPLD__Builder struct {
	_Pair_IPLD__Assembler
}
func (nb *_Pair_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Pair_IPLD__Builder) Reset() {
	var w _Pair_IPLD
	var m schema.Maybe
	*nb = _Pair_IPLD__Builder{_Pair_IPLD__Assembler{w: &w, m: &m}}
}
type _Pair_IPLD__Assembler struct {
	w *_Pair_IPLD
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Key _Node_IPLD__Assembler
	ca_Value _Node_IPLD__Assembler
	}

func (na *_Pair_IPLD__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Key.reset()
	na.ca_Value.reset()
}

var (
	fieldBit__Pair_IPLD_Key = 1 << 0
	fieldBit__Pair_IPLD_Value = 1 << 1
	fieldBits__Pair_IPLD_sufficient = 0 + 1 << 0 + 1 << 1
)
func (na *_Pair_IPLD__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Pair_IPLD{}
	}
	return na, nil
}
func (_Pair_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"xr.Pair_IPLD"}.BeginList(0)
}
func (na *_Pair_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"xr.Pair_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Pair_IPLD__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"xr.Pair_IPLD"}.AssignBool(false)
}
func (_Pair_IPLD__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"xr.Pair_IPLD"}.AssignInt(0)
}
func (_Pair_IPLD__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"xr.Pair_IPLD"}.AssignFloat(0)
}
func (_Pair_IPLD__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"xr.Pair_IPLD"}.AssignString("")
}
func (_Pair_IPLD__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"xr.Pair_IPLD"}.AssignBytes(nil)
}
func (_Pair_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"xr.Pair_IPLD"}.AssignLink(nil)
}
func (na *_Pair_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Pair_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "xr.Pair_IPLD", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Pair_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _Pair_IPLD__Prototype{}
}
func (ma *_Pair_IPLD__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Key.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Value.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Pair_IPLD__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Key":
		if ma.s & fieldBit__Pair_IPLD_Key != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Pair_IPLD_Key}
		}
		ma.s += fieldBit__Pair_IPLD_Key
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Key.w = &ma.w.Key
		ma.ca_Key.m = &ma.cm
		return &ma.ca_Key, nil
	case "Value":
		if ma.s & fieldBit__Pair_IPLD_Value != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Pair_IPLD_Value}
		}
		ma.s += fieldBit__Pair_IPLD_Value
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Value.w = &ma.w.Value
		ma.ca_Value.m = &ma.cm
		return &ma.ca_Value, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName:"xr.Pair_IPLD", Key:&_String{k}}
}
func (ma *_Pair_IPLD__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Pair_IPLD__KeyAssembler)(ma)
}
func (ma *_Pair_IPLD__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Key.w = &ma.w.Key
		ma.ca_Key.m = &ma.cm
		return &ma.ca_Key
	case 1:
		ma.ca_Value.w = &ma.w.Value
		ma.ca_Value.m = &ma.cm
		return &ma.ca_Value
	default:
		panic("unreachable")
	}
}
func (ma *_Pair_IPLD__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Pair_IPLD_sufficient != fieldBits__Pair_IPLD_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Pair_IPLD_Key == 0 {
			err.Missing = append(err.Missing, "Key")
		}
		if ma.s & fieldBit__Pair_IPLD_Value == 0 {
			err.Missing = append(err.Missing, "Value")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Pair_IPLD__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Pair_IPLD__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _Pair_IPLD__KeyAssembler _Pair_IPLD__Assembler
func (_Pair_IPLD__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"xr.Pair_IPLD.KeyAssembler"}.BeginMap(0)
}
func (_Pair_IPLD__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"xr.Pair_IPLD.KeyAssembler"}.BeginList(0)
}
func (na *_Pair_IPLD__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"xr.Pair_IPLD.KeyAssembler"}.AssignNull()
}
func (_Pair_IPLD__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"xr.Pair_IPLD.KeyAssembler"}.AssignBool(false)
}
func (_Pair_IPLD__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"xr.Pair_IPLD.KeyAssembler"}.AssignInt(0)
}
func (_Pair_IPLD__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"xr.Pair_IPLD.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Pair_IPLD__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Key":
		if ka.s & fieldBit__Pair_IPLD_Key != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Pair_IPLD_Key}
		}
		ka.s += fieldBit__Pair_IPLD_Key
		ka.state = maState_expectValue
		ka.f = 0
	case "Value":
		if ka.s & fieldBit__Pair_IPLD_Value != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Pair_IPLD_Value}
		}
		ka.s += fieldBit__Pair_IPLD_Value
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName:"xr.Pair_IPLD", Key:&_String{k}}
	}
	return nil
}
func (_Pair_IPLD__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"xr.Pair_IPLD.KeyAssembler"}.AssignBytes(nil)
}
func (_Pair_IPLD__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"xr.Pair_IPLD.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Pair_IPLD__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Pair_IPLD__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Pair_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Pair_IPLD) Representation() ipld.Node {
	return (*_Pair_IPLD__Repr)(n)
}
type _Pair_IPLD__Repr _Pair_IPLD
var (
	fieldName__Pair_IPLD_Key_serial = _String{"Key"}
	fieldName__Pair_IPLD_Value_serial = _String{"Value"}
)
var _ ipld.Node = &_Pair_IPLD__Repr{}
func (_Pair_IPLD__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_Pair_IPLD__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Key":
		return n.Key.Representation(), nil
	case "Value":
		return n.Value.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_Pair_IPLD__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Pair_IPLD__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"xr.Pair_IPLD.Repr"}.LookupByIndex(0)
}
func (n _Pair_IPLD__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Pair_IPLD__Repr) MapIterator() ipld.MapIterator {
	return &_Pair_IPLD__ReprMapItr{n, 0}
}

type _Pair_IPLD__ReprMapItr struct {
	n   *_Pair_IPLD__Repr
	idx int
	
}

func (itr *_Pair_IPLD__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Pair_IPLD_Key_serial
		v = itr.n.Key.Representation()
	case 1:
		k = &fieldName__Pair_IPLD_Value_serial
		v = itr.n.Value.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Pair_IPLD__ReprMapItr) Done() bool {
	return itr.idx >= 2
}
func (_Pair_IPLD__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_Pair_IPLD__Repr) Length() int64 {
	l := 2
	return int64(l)
}
func (_Pair_IPLD__Repr) IsAbsent() bool {
	return false
}
func (_Pair_IPLD__Repr) IsNull() bool {
	return false
}
func (_Pair_IPLD__Repr) AsBool() (bool, error) {
	return mixins.Map{"xr.Pair_IPLD.Repr"}.AsBool()
}
func (_Pair_IPLD__Repr) AsInt() (int64, error) {
	return mixins.Map{"xr.Pair_IPLD.Repr"}.AsInt()
}
func (_Pair_IPLD__Repr) AsFloat() (float64, error) {
	return mixins.Map{"xr.Pair_IPLD.Repr"}.AsFloat()
}
func (_Pair_IPLD__Repr) AsString() (string, error) {
	return mixins.Map{"xr.Pair_IPLD.Repr"}.AsString()
}
func (_Pair_IPLD__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"xr.Pair_IPLD.Repr"}.AsBytes()
}
func (_Pair_IPLD__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"xr.Pair_IPLD.Repr"}.AsLink()
}
func (_Pair_IPLD__Repr) Prototype() ipld.NodePrototype {
	return _Pair_IPLD__ReprPrototype{}
}
type _Pair_IPLD__ReprPrototype struct{}

func (_Pair_IPLD__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Pair_IPLD__ReprBuilder
	nb.Reset()
	return &nb
}
type _Pair_IPLD__ReprBuilder struct {
	_Pair_IPLD__ReprAssembler
}
func (nb *_Pair_IPLD__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Pair_IPLD__ReprBuilder) Reset() {
	var w _Pair_IPLD
	var m schema.Maybe
	*nb = _Pair_IPLD__ReprBuilder{_Pair_IPLD__ReprAssembler{w: &w, m: &m}}
}
type _Pair_IPLD__ReprAssembler struct {
	w *_Pair_IPLD
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Key _Node_IPLD__ReprAssembler
	ca_Value _Node_IPLD__ReprAssembler
	}

func (na *_Pair_IPLD__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Key.reset()
	na.ca_Value.reset()
}
func (na *_Pair_IPLD__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Pair_IPLD{}
	}
	return na, nil
}
func (_Pair_IPLD__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"xr.Pair_IPLD.Repr"}.BeginList(0)
}
func (na *_Pair_IPLD__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"xr.Pair_IPLD.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Pair_IPLD__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"xr.Pair_IPLD.Repr"}.AssignBool(false)
}
func (_Pair_IPLD__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{"xr.Pair_IPLD.Repr"}.AssignInt(0)
}
func (_Pair_IPLD__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"xr.Pair_IPLD.Repr"}.AssignFloat(0)
}
func (_Pair_IPLD__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"xr.Pair_IPLD.Repr"}.AssignString("")
}
func (_Pair_IPLD__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"xr.Pair_IPLD.Repr"}.AssignBytes(nil)
}
func (_Pair_IPLD__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"xr.Pair_IPLD.Repr"}.AssignLink(nil)
}
func (na *_Pair_IPLD__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Pair_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "xr.Pair_IPLD.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Pair_IPLD__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Pair_IPLD__ReprPrototype{}
}
func (ma *_Pair_IPLD__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Pair_IPLD__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Key":
		if ma.s & fieldBit__Pair_IPLD_Key != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Pair_IPLD_Key_serial}
		}
		ma.s += fieldBit__Pair_IPLD_Key
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Key.w = &ma.w.Key
		ma.ca_Key.m = &ma.cm
		return &ma.ca_Key, nil
	case "Value":
		if ma.s & fieldBit__Pair_IPLD_Value != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Pair_IPLD_Value_serial}
		}
		ma.s += fieldBit__Pair_IPLD_Value
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Value.w = &ma.w.Value
		ma.ca_Value.m = &ma.cm
		return &ma.ca_Value, nil
	default:
	}
	return nil, ipld.ErrInvalidKey{TypeName:"xr.Pair_IPLD.Repr", Key:&_String{k}}
}
func (ma *_Pair_IPLD__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Pair_IPLD__ReprKeyAssembler)(ma)
}
func (ma *_Pair_IPLD__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Key.w = &ma.w.Key
		ma.ca_Key.m = &ma.cm
		return &ma.ca_Key
	case 1:
		ma.ca_Value.w = &ma.w.Value
		ma.ca_Value.m = &ma.cm
		return &ma.ca_Value
	default:
		panic("unreachable")
	}
}
func (ma *_Pair_IPLD__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Pair_IPLD_sufficient != fieldBits__Pair_IPLD_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Pair_IPLD_Key == 0 {
			err.Missing = append(err.Missing, "Key")
		}
		if ma.s & fieldBit__Pair_IPLD_Value == 0 {
			err.Missing = append(err.Missing, "Value")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Pair_IPLD__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Pair_IPLD__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _Pair_IPLD__ReprKeyAssembler _Pair_IPLD__ReprAssembler
func (_Pair_IPLD__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"xr.Pair_IPLD.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Pair_IPLD__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"xr.Pair_IPLD.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Pair_IPLD__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"xr.Pair_IPLD.Repr.KeyAssembler"}.AssignNull()
}
func (_Pair_IPLD__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"xr.Pair_IPLD.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Pair_IPLD__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"xr.Pair_IPLD.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Pair_IPLD__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"xr.Pair_IPLD.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Pair_IPLD__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Key":
		if ka.s & fieldBit__Pair_IPLD_Key != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Pair_IPLD_Key_serial}
		}
		ka.s += fieldBit__Pair_IPLD_Key
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Value":
		if ka.s & fieldBit__Pair_IPLD_Value != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Pair_IPLD_Value_serial}
		}
		ka.s += fieldBit__Pair_IPLD_Value
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	}
	return ipld.ErrInvalidKey{TypeName:"xr.Pair_IPLD.Repr", Key:&_String{k}}
}
func (_Pair_IPLD__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"xr.Pair_IPLD.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Pair_IPLD__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"xr.Pair_IPLD.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Pair_IPLD__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Pair_IPLD__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n *_Pairs_IPLD) Lookup(idx int64) Pair_IPLD {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_Pairs_IPLD) LookupMaybe(idx int64) MaybePair_IPLD {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Pair_IPLD__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _Pairs_IPLD__valueAbsent = _Pair_IPLD__Maybe{m:schema.Maybe_Absent}
func (n Pairs_IPLD) Iterator() *Pairs_IPLD__Itr {
	return &Pairs_IPLD__Itr{n, 0}
}

type Pairs_IPLD__Itr struct {
	n Pairs_IPLD
	idx  int
}

func (itr *Pairs_IPLD__Itr) Next() (idx int64, v Pair_IPLD) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *Pairs_IPLD__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _Pairs_IPLD__Maybe struct {
	m schema.Maybe
	v Pairs_IPLD
}
type MaybePairs_IPLD = *_Pairs_IPLD__Maybe

func (m MaybePairs_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybePairs_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybePairs_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybePairs_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybePairs_IPLD) Must() Pairs_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Pairs_IPLD)(&_Pairs_IPLD{})
var _ schema.TypedNode = (Pairs_IPLD)(&_Pairs_IPLD{})
func (Pairs_IPLD) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (Pairs_IPLD) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"xr.Pairs_IPLD"}.LookupByString("")
}
func (n Pairs_IPLD) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n Pairs_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n Pairs_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "xr.Pairs_IPLD", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (Pairs_IPLD) MapIterator() ipld.MapIterator {
	return nil
}
func (n Pairs_IPLD) ListIterator() ipld.ListIterator {
	return &_Pairs_IPLD__ListItr{n, 0}
}

type _Pairs_IPLD__ListItr struct {
	n Pairs_IPLD
	idx  int
}

func (itr *_Pairs_IPLD__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_Pairs_IPLD__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n Pairs_IPLD) Length() int64 {
	return int64(len(n.x))
}
func (Pairs_IPLD) IsAbsent() bool {
	return false
}
func (Pairs_IPLD) IsNull() bool {
	return false
}
func (Pairs_IPLD) AsBool() (bool, error) {
	return mixins.List{"xr.Pairs_IPLD"}.AsBool()
}
func (Pairs_IPLD) AsInt() (int64, error) {
	return mixins.List{"xr.Pairs_IPLD"}.AsInt()
}
func (Pairs_IPLD) AsFloat() (float64, error) {
	return mixins.List{"xr.Pairs_IPLD"}.AsFloat()
}
func (Pairs_IPLD) AsString() (string, error) {
	return mixins.List{"xr.Pairs_IPLD"}.AsString()
}
func (Pairs_IPLD) AsBytes() ([]byte, error) {
	return mixins.List{"xr.Pairs_IPLD"}.AsBytes()
}
func (Pairs_IPLD) AsLink() (ipld.Link, error) {
	return mixins.List{"xr.Pairs_IPLD"}.AsLink()
}
func (Pairs_IPLD) Prototype() ipld.NodePrototype {
	return _Pairs_IPLD__Prototype{}
}
type _Pairs_IPLD__Prototype struct{}

func (_Pairs_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Pairs_IPLD__Builder
	nb.Reset()
	return &nb
}
type _Pairs_IPLD__Builder struct {
	_Pairs_IPLD__Assembler
}
func (nb *_Pairs_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Pairs_IPLD__Builder) Reset() {
	var w _Pairs_IPLD
	var m schema.Maybe
	*nb = _Pairs_IPLD__Builder{_Pairs_IPLD__Assembler{w: &w, m: &m}}
}
type _Pairs_IPLD__Assembler struct {
	w *_Pairs_IPLD
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _Pair_IPLD__Assembler
}

func (na *_Pairs_IPLD__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Pairs_IPLD__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"xr.Pairs_IPLD"}.BeginMap(0)
}
func (na *_Pairs_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_Pairs_IPLD{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Pair_IPLD, 0, sizeHint)
	}
	return na, nil
}
func (na *_Pairs_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"xr.Pairs_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Pairs_IPLD__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD"}.AssignBool(false)
}
func (_Pairs_IPLD__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD"}.AssignInt(0)
}
func (_Pairs_IPLD__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD"}.AssignFloat(0)
}
func (_Pairs_IPLD__Assembler) AssignString(string) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD"}.AssignString("")
}
func (_Pairs_IPLD__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD"}.AssignBytes(nil)
}
func (_Pairs_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD"}.AssignLink(nil)
}
func (na *_Pairs_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Pairs_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "xr.Pairs_IPLD", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Pairs_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _Pairs_IPLD__Prototype{}
}
func (la *_Pairs_IPLD__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Pairs_IPLD__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Pair_IPLD{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Pairs_IPLD__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Pairs_IPLD__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Pair_IPLD__Prototype{}
}
func (Pairs_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Pairs_IPLD) Representation() ipld.Node {
	return (*_Pairs_IPLD__Repr)(n)
}
type _Pairs_IPLD__Repr _Pairs_IPLD
var _ ipld.Node = &_Pairs_IPLD__Repr{}
func (_Pairs_IPLD__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_Pairs_IPLD__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"xr.Pairs_IPLD.Repr"}.LookupByString("")
}
func (nr *_Pairs_IPLD__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (Pairs_IPLD)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Pair_IPLD).Representation(), nil
}
func (nr *_Pairs_IPLD__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (Pairs_IPLD)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Pair_IPLD).Representation(), nil
}
func (n _Pairs_IPLD__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "xr.Pairs_IPLD.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_Pairs_IPLD__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_Pairs_IPLD__Repr) ListIterator() ipld.ListIterator {
	return &_Pairs_IPLD__ReprListItr{(Pairs_IPLD)(nr), 0}
}

type _Pairs_IPLD__ReprListItr _Pairs_IPLD__ListItr

func (itr *_Pairs_IPLD__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_Pairs_IPLD__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(Pair_IPLD).Representation(), nil
}
func (itr *_Pairs_IPLD__ReprListItr) Done() bool {
	return (*_Pairs_IPLD__ListItr)(itr).Done()
}

func (rn *_Pairs_IPLD__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_Pairs_IPLD__Repr) IsAbsent() bool {
	return false
}
func (_Pairs_IPLD__Repr) IsNull() bool {
	return false
}
func (_Pairs_IPLD__Repr) AsBool() (bool, error) {
	return mixins.List{"xr.Pairs_IPLD.Repr"}.AsBool()
}
func (_Pairs_IPLD__Repr) AsInt() (int64, error) {
	return mixins.List{"xr.Pairs_IPLD.Repr"}.AsInt()
}
func (_Pairs_IPLD__Repr) AsFloat() (float64, error) {
	return mixins.List{"xr.Pairs_IPLD.Repr"}.AsFloat()
}
func (_Pairs_IPLD__Repr) AsString() (string, error) {
	return mixins.List{"xr.Pairs_IPLD.Repr"}.AsString()
}
func (_Pairs_IPLD__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"xr.Pairs_IPLD.Repr"}.AsBytes()
}
func (_Pairs_IPLD__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"xr.Pairs_IPLD.Repr"}.AsLink()
}
func (_Pairs_IPLD__Repr) Prototype() ipld.NodePrototype {
	return _Pairs_IPLD__ReprPrototype{}
}
type _Pairs_IPLD__ReprPrototype struct{}

func (_Pairs_IPLD__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Pairs_IPLD__ReprBuilder
	nb.Reset()
	return &nb
}
type _Pairs_IPLD__ReprBuilder struct {
	_Pairs_IPLD__ReprAssembler
}
func (nb *_Pairs_IPLD__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Pairs_IPLD__ReprBuilder) Reset() {
	var w _Pairs_IPLD
	var m schema.Maybe
	*nb = _Pairs_IPLD__ReprBuilder{_Pairs_IPLD__ReprAssembler{w: &w, m: &m}}
}
type _Pairs_IPLD__ReprAssembler struct {
	w *_Pairs_IPLD
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _Pair_IPLD__ReprAssembler
}

func (na *_Pairs_IPLD__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Pairs_IPLD__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"xr.Pairs_IPLD.Repr"}.BeginMap(0)
}
func (na *_Pairs_IPLD__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_Pairs_IPLD{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Pair_IPLD, 0, sizeHint)
	}
	return na, nil
}
func (na *_Pairs_IPLD__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"xr.Pairs_IPLD.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Pairs_IPLD__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD.Repr"}.AssignBool(false)
}
func (_Pairs_IPLD__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD.Repr"}.AssignInt(0)
}
func (_Pairs_IPLD__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD.Repr"}.AssignFloat(0)
}
func (_Pairs_IPLD__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD.Repr"}.AssignString("")
}
func (_Pairs_IPLD__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD.Repr"}.AssignBytes(nil)
}
func (_Pairs_IPLD__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"xr.Pairs_IPLD.Repr"}.AssignLink(nil)
}
func (na *_Pairs_IPLD__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Pairs_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "xr.Pairs_IPLD.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Pairs_IPLD__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Pairs_IPLD__ReprPrototype{}
}
func (la *_Pairs_IPLD__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Pairs_IPLD__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Pair_IPLD{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Pairs_IPLD__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Pairs_IPLD__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Pair_IPLD__ReprPrototype{}
}


func (n _Set_IPLD) FieldTag() String {
	return &n.Tag
}
func (n _Set_IPLD) FieldElements() Nodes_IPLD {
	return &n.Elements
}
type _Set_IPLD__Maybe struct {
	m schema.Maybe
	v Set_IPLD
}
type MaybeSet_IPLD = *_Set_IPLD__Maybe

func (m MaybeSet_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSet_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSet_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSet_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeSet_IPLD) Must() Set_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__Set_IPLD_Tag = _String{"Tag"}
	fieldName__Set_IPLD_Elements = _String{"Elements"}
)
var _ ipld.Node = (Set_IPLD)(&_Set_IPLD{})
var _ schema.TypedNode = (Set_IPLD)(&_Set_IPLD{})
func (Set_IPLD) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Set_IPLD) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Tag":
		return &n.Tag, nil
	case "Elements":
		return &n.Elements, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Set_IPLD) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Set_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"xr.Set_IPLD"}.LookupByIndex(0)
}
func (n Set_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Set_IPLD) MapIterator() ipld.MapIterator {
	return &_Set_IPLD__MapItr{n, 0}
}

type _Set_IPLD__MapItr struct {
	n Set_IPLD
	idx  int
}

func (itr *_Set_IPLD__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Set_IPLD_Tag
		v = &itr.n.Tag
	case 1:
		k = &fieldName__Set_IPLD_Elements
		v = &itr.n.Elements
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Set_IPLD__MapItr) Done() bool {
	return itr.idx >= 2
}

func (Set_IPLD) ListIterator() ipld.ListIterator {
	return nil
}
func (Set_IPLD) Length() int64 {
	return 2
}
func (Set_IPLD) IsAbsent() bool {
	return false
}
func (Set_IPLD) IsNull() bool {
	return false
}
func (Set_IPLD) AsBool() (bool, error) {
	return mixins.Map{"xr.Set_IPLD"}.AsBool()
}
func (Set_IPLD) AsInt() (int64, error) {
	return mixins.Map{"xr.Set_IPLD"}.AsInt()
}
func (Set_IPLD) AsFloat() (float64, error) {
	return mixins.Map{"xr.Set_IPLD"}.AsFloat()
}
func (Set_IPLD) AsString() (string, error) {
	return mixins.Map{"xr.Set_IPLD"}.AsString()
}
func (Set_IPLD) AsBytes() ([]byte, error) {
	return mixins.Map{"xr.Set_IPLD"}.AsBytes()
}
func (Set_IPLD) AsLink() (ipld.Link, error) {
	return mixins.Map{"xr.Set_IPLD"}.AsLink()
}
func (Set_IPLD) Prototype() ipld.NodePrototype {
	return _Set_IPLD__Prototype{}
}
type _Set_IPLD__Prototype struct{}

func (_Set_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Set_IPLD__Builder
	nb.Reset()
	return &nb
}
type _Set_IPLD__Builder struct {
	_Set_IPLD__Assembler
}
func (nb *_Set_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Set_IPLD__Builder) Reset() {
	var w _Set_IPLD
	var m schema.Maybe
	*nb = _Set_IPLD__Builder{_Set_IPLD__Assembler{w: &w, m: &m}}
}
type _Set_IPLD__Assembler struct {
	w *_Set_IPLD
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Tag _String__Assembler
	ca_Elements _Nodes_IPLD__Assembler
	}

func (na *_Set_IPLD__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Tag.reset()
	na.ca_Elements.reset()
}

var (
	fieldBit__Set_IPLD_Tag = 1 << 0
	fieldBit__Set_IPLD_Elements = 1 << 1
	fieldBits__Set_IPLD_sufficient = 0 + 1 << 0 + 1 << 1
)
func (na *_Set_IPLD__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Set_IPLD{}
	}
	return na, nil
}
func (_Set_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"xr.Set_IPLD"}.BeginList(0)
}
func (na *_Set_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"xr.Set_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Set_IPLD__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"xr.Set_IPLD"}.AssignBool(false)
}
func (_Set_IPLD__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"xr.Set_IPLD"}.AssignInt(0)
}
func (_Set_IPLD__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"xr.Set_IPLD"}.AssignFloat(0)
}
func (_Set_IPLD__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"xr.Set_IPLD"}.AssignString("")
}
func (_Set_IPLD__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"xr.Set_IPLD"}.AssignBytes(nil)
}
func (_Set_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"xr.Set_IPLD"}.AssignLink(nil)
}
func (na *_Set_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Set_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "xr.Set_IPLD", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Set_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _Set_IPLD__Prototype{}
}
func (ma *_Set_IPLD__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Tag.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Elements.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Set_IPLD__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Tag":
		if ma.s & fieldBit__Set_IPLD_Tag != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Set_IPLD_Tag}
		}
		ma.s += fieldBit__Set_IPLD_Tag
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag, nil
	case "Elements":
		if ma.s & fieldBit__Set_IPLD_Elements != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Set_IPLD_Elements}
		}
		ma.s += fieldBit__Set_IPLD_Elements
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Elements.w = &ma.w.Elements
		ma.ca_Elements.m = &ma.cm
		return &ma.ca_Elements, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName:"xr.Set_IPLD", Key:&_String{k}}
}
func (ma *_Set_IPLD__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Set_IPLD__KeyAssembler)(ma)
}
func (ma *_Set_IPLD__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag
	case 1:
		ma.ca_Elements.w = &ma.w.Elements
		ma.ca_Elements.m = &ma.cm
		return &ma.ca_Elements
	default:
		panic("unreachable")
	}
}
func (ma *_Set_IPLD__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Set_IPLD_sufficient != fieldBits__Set_IPLD_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Set_IPLD_Tag == 0 {
			err.Missing = append(err.Missing, "Tag")
		}
		if ma.s & fieldBit__Set_IPLD_Elements == 0 {
			err.Missing = append(err.Missing, "Elements")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Set_IPLD__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Set_IPLD__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _Set_IPLD__KeyAssembler _Set_IPLD__Assembler
func (_Set_IPLD__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"xr.Set_IPLD.KeyAssembler"}.BeginMap(0)
}
func (_Set_IPLD__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"xr.Set_IPLD.KeyAssembler"}.BeginList(0)
}
func (na *_Set_IPLD__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"xr.Set_IPLD.KeyAssembler"}.AssignNull()
}
func (_Set_IPLD__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"xr.Set_IPLD.KeyAssembler"}.AssignBool(false)
}
func (_Set_IPLD__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"xr.Set_IPLD.KeyAssembler"}.AssignInt(0)
}
func (_Set_IPLD__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"xr.Set_IPLD.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Set_IPLD__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Tag":
		if ka.s & fieldBit__Set_IPLD_Tag != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Set_IPLD_Tag}
		}
		ka.s += fieldBit__Set_IPLD_Tag
		ka.state = maState_expectValue
		ka.f = 0
	case "Elements":
		if ka.s & fieldBit__Set_IPLD_Elements != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Set_IPLD_Elements}
		}
		ka.s += fieldBit__Set_IPLD_Elements
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName:"xr.Set_IPLD", Key:&_String{k}}
	}
	return nil
}
func (_Set_IPLD__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"xr.Set_IPLD.KeyAssembler"}.AssignBytes(nil)
}
func (_Set_IPLD__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"xr.Set_IPLD.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Set_IPLD__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Set_IPLD__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Set_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Set_IPLD) Representation() ipld.Node {
	return (*_Set_IPLD__Repr)(n)
}
type _Set_IPLD__Repr _Set_IPLD
var (
	fieldName__Set_IPLD_Tag_serial = _String{"Tag"}
	fieldName__Set_IPLD_Elements_serial = _String{"Elements"}
)
var _ ipld.Node = &_Set_IPLD__Repr{}
func (_Set_IPLD__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_Set_IPLD__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Tag":
		return n.Tag.Representation(), nil
	case "Elements":
		return n.Elements.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_Set_IPLD__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Set_IPLD__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"xr.Set_IPLD.Repr"}.LookupByIndex(0)
}
func (n _Set_IPLD__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Set_IPLD__Repr) MapIterator() ipld.MapIterator {
	return &_Set_IPLD__ReprMapItr{n, 0}
}

type _Set_IPLD__ReprMapItr struct {
	n   *_Set_IPLD__Repr
	idx int
	
}

func (itr *_Set_IPLD__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Set_IPLD_Tag_serial
		v = itr.n.Tag.Representation()
	case 1:
		k = &fieldName__Set_IPLD_Elements_serial
		v = itr.n.Elements.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Set_IPLD__ReprMapItr) Done() bool {
	return itr.idx >= 2
}
func (_Set_IPLD__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_Set_IPLD__Repr) Length() int64 {
	l := 2
	return int64(l)
}
func (_Set_IPLD__Repr) IsAbsent() bool {
	return false
}
func (_Set_IPLD__Repr) IsNull() bool {
	return false
}
func (_Set_IPLD__Repr) AsBool() (bool, error) {
	return mixins.Map{"xr.Set_IPLD.Repr"}.AsBool()
}
func (_Set_IPLD__Repr) AsInt() (int64, error) {
	return mixins.Map{"xr.Set_IPLD.Repr"}.AsInt()
}
func (_Set_IPLD__Repr) AsFloat() (float64, error) {
	return mixins.Map{"xr.Set_IPLD.Repr"}.AsFloat()
}
func (_Set_IPLD__Repr) AsString() (string, error) {
	return mixins.Map{"xr.Set_IPLD.Repr"}.AsString()
}
func (_Set_IPLD__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"xr.Set_IPLD.Repr"}.AsBytes()
}
func (_Set_IPLD__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"xr.Set_IPLD.Repr"}.AsLink()
}
func (_Set_IPLD__Repr) Prototype() ipld.NodePrototype {
	return _Set_IPLD__ReprPrototype{}
}
type _Set_IPLD__ReprPrototype struct{}

func (_Set_IPLD__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Set_IPLD__ReprBuilder
	nb.Reset()
	return &nb
}
type _Set_IPLD__ReprBuilder struct {
	_Set_IPLD__ReprAssembler
}
func (nb *_Set_IPLD__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Set_IPLD__ReprBuilder) Reset() {
	var w _Set_IPLD
	var m schema.Maybe
	*nb = _Set_IPLD__ReprBuilder{_Set_IPLD__ReprAssembler{w: &w, m: &m}}
}
type _Set_IPLD__ReprAssembler struct {
	w *_Set_IPLD
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Tag _String__ReprAssembler
	ca_Elements _Nodes_IPLD__ReprAssembler
	}

func (na *_Set_IPLD__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Tag.reset()
	na.ca_Elements.reset()
}
func (na *_Set_IPLD__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Set_IPLD{}
	}
	return na, nil
}
func (_Set_IPLD__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"xr.Set_IPLD.Repr"}.BeginList(0)
}
func (na *_Set_IPLD__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"xr.Set_IPLD.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Set_IPLD__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"xr.Set_IPLD.Repr"}.AssignBool(false)
}
func (_Set_IPLD__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{"xr.Set_IPLD.Repr"}.AssignInt(0)
}
func (_Set_IPLD__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"xr.Set_IPLD.Repr"}.AssignFloat(0)
}
func (_Set_IPLD__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"xr.Set_IPLD.Repr"}.AssignString("")
}
func (_Set_IPLD__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"xr.Set_IPLD.Repr"}.AssignBytes(nil)
}
func (_Set_IPLD__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"xr.Set_IPLD.Repr"}.AssignLink(nil)
}
func (na *_Set_IPLD__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Set_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "xr.Set_IPLD.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Set_IPLD__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Set_IPLD__ReprPrototype{}
}
func (ma *_Set_IPLD__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Set_IPLD__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Tag":
		if ma.s & fieldBit__Set_IPLD_Tag != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Set_IPLD_Tag_serial}
		}
		ma.s += fieldBit__Set_IPLD_Tag
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag, nil
	case "Elements":
		if ma.s & fieldBit__Set_IPLD_Elements != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__Set_IPLD_Elements_serial}
		}
		ma.s += fieldBit__Set_IPLD_Elements
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Elements.w = &ma.w.Elements
		ma.ca_Elements.m = &ma.cm
		return &ma.ca_Elements, nil
	default:
	}
	return nil, ipld.ErrInvalidKey{TypeName:"xr.Set_IPLD.Repr", Key:&_String{k}}
}
func (ma *_Set_IPLD__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Set_IPLD__ReprKeyAssembler)(ma)
}
func (ma *_Set_IPLD__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag
	case 1:
		ma.ca_Elements.w = &ma.w.Elements
		ma.ca_Elements.m = &ma.cm
		return &ma.ca_Elements
	default:
		panic("unreachable")
	}
}
func (ma *_Set_IPLD__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Set_IPLD_sufficient != fieldBits__Set_IPLD_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Set_IPLD_Tag == 0 {
			err.Missing = append(err.Missing, "Tag")
		}
		if ma.s & fieldBit__Set_IPLD_Elements == 0 {
			err.Missing = append(err.Missing, "Elements")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Set_IPLD__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Set_IPLD__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _Set_IPLD__ReprKeyAssembler _Set_IPLD__ReprAssembler
func (_Set_IPLD__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"xr.Set_IPLD.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Set_IPLD__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"xr.Set_IPLD.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Set_IPLD__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"xr.Set_IPLD.Repr.KeyAssembler"}.AssignNull()
}
func (_Set_IPLD__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"xr.Set_IPLD.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Set_IPLD__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"xr.Set_IPLD.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Set_IPLD__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"xr.Set_IPLD.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Set_IPLD__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Tag":
		if ka.s & fieldBit__Set_IPLD_Tag != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Set_IPLD_Tag_serial}
		}
		ka.s += fieldBit__Set_IPLD_Tag
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Elements":
		if ka.s & fieldBit__Set_IPLD_Elements != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__Set_IPLD_Elements_serial}
		}
		ka.s += fieldBit__Set_IPLD_Elements
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	}
	return ipld.ErrInvalidKey{TypeName:"xr.Set_IPLD.Repr", Key:&_String{k}}
}
func (_Set_IPLD__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"xr.Set_IPLD.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Set_IPLD__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"xr.Set_IPLD.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Set_IPLD__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Set_IPLD__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n String) String() string {
	return n.x
}
func (_String__Prototype) fromString(w *_String, v string) error {
	*w = _String{v}
	return nil
}
func (_String__Prototype) FromString(v string) (String, error) {
	n := _String{v}
	return &n, nil
}
type _String__Maybe struct {
	m schema.Maybe
	v String
}
type MaybeString = *_String__Maybe

func (m MaybeString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeString) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeString) Must() String {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (String)(&_String{})
var _ schema.TypedNode = (String)(&_String{})
func (String) Kind() ipld.Kind {
	return ipld.Kind_String
}
func (String) LookupByString(string) (ipld.Node, error) {
	return mixins.String{"xr.String"}.LookupByString("")
}
func (String) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{"xr.String"}.LookupByNode(nil)
}
func (String) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.String{"xr.String"}.LookupByIndex(0)
}
func (String) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{"xr.String"}.LookupBySegment(seg)
}
func (String) MapIterator() ipld.MapIterator {
	return nil
}
func (String) ListIterator() ipld.ListIterator {
	return nil
}
func (String) Length() int64 {
	return -1
}
func (String) IsAbsent() bool {
	return false
}
func (String) IsNull() bool {
	return false
}
func (String) AsBool() (bool, error) {
	return mixins.String{"xr.String"}.AsBool()
}
func (String) AsInt() (int64, error) {
	return mixins.String{"xr.String"}.AsInt()
}
func (String) AsFloat() (float64, error) {
	return mixins.String{"xr.String"}.AsFloat()
}
func (n String) AsString() (string, error) {
	return n.x, nil
}
func (String) AsBytes() ([]byte, error) {
	return mixins.String{"xr.String"}.AsBytes()
}
func (String) AsLink() (ipld.Link, error) {
	return mixins.String{"xr.String"}.AsLink()
}
func (String) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
type _String__Prototype struct{}

func (_String__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _String__Builder
	nb.Reset()
	return &nb
}
type _String__Builder struct {
	_String__Assembler
}
func (nb *_String__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_String__Builder) Reset() {
	var w _String
	var m schema.Maybe
	*nb = _String__Builder{_String__Assembler{w: &w, m: &m}}
}
type _String__Assembler struct {
	w *_String
	m *schema.Maybe
}

func (na *_String__Assembler) reset() {}
func (_String__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"xr.String"}.BeginMap(0)
}
func (_String__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"xr.String"}.BeginList(0)
}
func (na *_String__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{"xr.String"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_String__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{"xr.String"}.AssignBool(false)
}
func (_String__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{"xr.String"}.AssignInt(0)
}
func (_String__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"xr.String"}.AssignFloat(0)
}
func (na *_String__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_String{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_String__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"xr.String"}.AssignBytes(nil)
}
func (_String__Assembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"xr.String"}.AssignLink(nil)
}
func (na *_String__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_String__Assembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (String) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n String) Representation() ipld.Node {
	return (*_String__Repr)(n)
}
type _String__Repr = _String
var _ ipld.Node = &_String__Repr{}
type _String__ReprPrototype = _String__Prototype
type _String__ReprAssembler = _String__Assembler

func (n String_IPLD) String() string {
	return n.x
}
func (_String_IPLD__Prototype) fromString(w *_String_IPLD, v string) error {
	*w = _String_IPLD{v}
	return nil
}
func (_String_IPLD__Prototype) FromString(v string) (String_IPLD, error) {
	n := _String_IPLD{v}
	return &n, nil
}
type _String_IPLD__Maybe struct {
	m schema.Maybe
	v String_IPLD
}
type MaybeString_IPLD = *_String_IPLD__Maybe

func (m MaybeString_IPLD) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeString_IPLD) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeString_IPLD) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeString_IPLD) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeString_IPLD) Must() String_IPLD {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (String_IPLD)(&_String_IPLD{})
var _ schema.TypedNode = (String_IPLD)(&_String_IPLD{})
func (String_IPLD) Kind() ipld.Kind {
	return ipld.Kind_String
}
func (String_IPLD) LookupByString(string) (ipld.Node, error) {
	return mixins.String{"xr.String_IPLD"}.LookupByString("")
}
func (String_IPLD) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{"xr.String_IPLD"}.LookupByNode(nil)
}
func (String_IPLD) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.String{"xr.String_IPLD"}.LookupByIndex(0)
}
func (String_IPLD) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{"xr.String_IPLD"}.LookupBySegment(seg)
}
func (String_IPLD) MapIterator() ipld.MapIterator {
	return nil
}
func (String_IPLD) ListIterator() ipld.ListIterator {
	return nil
}
func (String_IPLD) Length() int64 {
	return -1
}
func (String_IPLD) IsAbsent() bool {
	return false
}
func (String_IPLD) IsNull() bool {
	return false
}
func (String_IPLD) AsBool() (bool, error) {
	return mixins.String{"xr.String_IPLD"}.AsBool()
}
func (String_IPLD) AsInt() (int64, error) {
	return mixins.String{"xr.String_IPLD"}.AsInt()
}
func (String_IPLD) AsFloat() (float64, error) {
	return mixins.String{"xr.String_IPLD"}.AsFloat()
}
func (n String_IPLD) AsString() (string, error) {
	return n.x, nil
}
func (String_IPLD) AsBytes() ([]byte, error) {
	return mixins.String{"xr.String_IPLD"}.AsBytes()
}
func (String_IPLD) AsLink() (ipld.Link, error) {
	return mixins.String{"xr.String_IPLD"}.AsLink()
}
func (String_IPLD) Prototype() ipld.NodePrototype {
	return _String_IPLD__Prototype{}
}
type _String_IPLD__Prototype struct{}

func (_String_IPLD__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _String_IPLD__Builder
	nb.Reset()
	return &nb
}
type _String_IPLD__Builder struct {
	_String_IPLD__Assembler
}
func (nb *_String_IPLD__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_String_IPLD__Builder) Reset() {
	var w _String_IPLD
	var m schema.Maybe
	*nb = _String_IPLD__Builder{_String_IPLD__Assembler{w: &w, m: &m}}
}
type _String_IPLD__Assembler struct {
	w *_String_IPLD
	m *schema.Maybe
}

func (na *_String_IPLD__Assembler) reset() {}
func (_String_IPLD__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"xr.String_IPLD"}.BeginMap(0)
}
func (_String_IPLD__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"xr.String_IPLD"}.BeginList(0)
}
func (na *_String_IPLD__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{"xr.String_IPLD"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_String_IPLD__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{"xr.String_IPLD"}.AssignBool(false)
}
func (_String_IPLD__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{"xr.String_IPLD"}.AssignInt(0)
}
func (_String_IPLD__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"xr.String_IPLD"}.AssignFloat(0)
}
func (na *_String_IPLD__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_String_IPLD{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_String_IPLD__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"xr.String_IPLD"}.AssignBytes(nil)
}
func (_String_IPLD__Assembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"xr.String_IPLD"}.AssignLink(nil)
}
func (na *_String_IPLD__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_String_IPLD); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_String_IPLD__Assembler) Prototype() ipld.NodePrototype {
	return _String_IPLD__Prototype{}
}
func (String_IPLD) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n String_IPLD) Representation() ipld.Node {
	return (*_String_IPLD__Repr)(n)
}
type _String_IPLD__Repr = _String_IPLD
var _ ipld.Node = &_String_IPLD__Repr{}
type _String_IPLD__ReprPrototype = _String_IPLD__Prototype
type _String_IPLD__ReprAssembler = _String_IPLD__Assembler

